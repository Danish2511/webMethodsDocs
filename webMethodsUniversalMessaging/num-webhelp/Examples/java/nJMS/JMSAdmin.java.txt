/*
 *
 *   Copyright (c) 1999 - 2011 my-Channels Ltd
 *   Copyright (c) 2012 - 2022 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.
 *
 *   Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG.
 *
 */

package com.pcbsys.nirvana.nSpace;

import static com.pcbsys.nirvana.nJMS.EnvironmentProperties.CONTEXT_FACTORY;
import static com.pcbsys.nirvana.nJMS.EnvironmentProperties.DEFAULT_CONTEXT_FACTORY;
import static com.pcbsys.nirvana.nJMS.EnvironmentProperties.DEFAULT_PASSWORD;
import static com.pcbsys.nirvana.nJMS.EnvironmentProperties.DEFAULT_PRINCIPAL;
import static com.pcbsys.nirvana.nJMS.EnvironmentProperties.DEFAULT_RNAME;
import static com.pcbsys.nirvana.nJMS.EnvironmentProperties.LAX_NL_ENV_;
import static com.pcbsys.nirvana.nJMS.EnvironmentProperties.PASSWORD;
import static com.pcbsys.nirvana.nJMS.EnvironmentProperties.PRINCIPAL;
import static com.pcbsys.nirvana.nJMS.EnvironmentProperties.PROVIDER_URL;
import static com.pcbsys.nirvana.nJMS.EnvironmentProperties.RNAME;
import static javax.naming.Context.SECURITY_AUTHENTICATION;

import com.pcbsys.foundation.utils.fEnvironment;
import com.pcbsys.foundation.utils.fSystemConfiguration;
import com.pcbsys.nirvana.base.nRuntime;
import com.pcbsys.nirvana.client.nChannelAlreadyExistsException;
import com.pcbsys.nirvana.client.nChannelAttributes;
import com.pcbsys.nirvana.client.nChannelNotFoundException;
import com.pcbsys.nirvana.client.nSecurityException;
import com.pcbsys.nirvana.client.nSession;
import com.pcbsys.nirvana.client.nSessionAttributes;
import com.pcbsys.nirvana.client.nSessionFactory;
import com.pcbsys.nirvana.nJMS.Constants;
import java.util.Hashtable;
import javax.jms.ConnectionFactory;
import javax.jms.QueueConnectionFactory;
import javax.jms.TopicConnectionFactory;
import javax.naming.Binding;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NameClassPair;
import javax.naming.NamingEnumeration;


/**
 * <*Enter Class Description*>
 */
public class JMSAdmin {

  //
  //---------------------------------------------------------------------------
  // JMSAdmin Class Interface
  //---------------------------------------------------------------------------
  //
  private Context ictx = null;
  private nSession mysession = null;
  private String rname = "nsp://127.0.0.1:9000";
  protected final static char dot = '.';
  protected final static char slash = '/';

  private static void usage2() {
    System.out.println(
        "java -DRNAME [-DPRINCIPAL] [-DPASSWORD] -DCONTEXT_FACTORY -DPROVIDER_URL JMSAdmin bind|unbind|list queueFactory|topicFactory|connectionFactory|xaconnectionFactory|queue|topic name/alias");
    System.exit(1);
  }

  /**
   * Prints the usage message for this class
   */
  private static void usage() {
    System.out.println("Usage ...\n");
    System.out.println("jmsadmin <operation> <object> <object alias> [sync writes] [capacity] [shared durable]\n");
    System.out.println("<Required Arguments> \n");
    System.out.println(
        "<operation> - The operation to be performed on the object specified. Valid operations are : bind, unbind and list");
    System.out.println(
        "<object> - The object where the specified operation will be performed on. Valid objects are : queueFactory, topicFactory, connectionFactory, xaconnectionFactory, queue and topic");
    System.out.println("<object alias> - The logical name or alias of that object");
    System.out.println("[sync writes] - whether each write is sync'd to disk");
    System.out.println("[capacity] - Set a maximum message count on the topic or queue");
    System.out.println("[shared durable] -  Enable shared durable flag when set to true");
    System.out.println(
        "\n\nNote: Optional arguments are strictly ordered. In order to (for example) set the shared durable flag, the argument must be passed after [sync writes] (default value false) \n"
            + "    and [capacity] (default value -1). \n    e.g. \"jmsadmin bind connectionFactory Alias false -1 true\" \n");
    System.out.println("\nNote: -? provides help on environment variables \n");
  }

  private static void UsageEnv() {
    System.out.println("\n\n(Environment Variables) \n");

    System.out.println("(RNAME) - One or more RNAME entries in the form protocol://host:port");
    System.out.println("   protocol - Can be one of nsp, nhp, nsps, or nhps, where:");
    System.out.println("   nsp - Specifies Nirvana Socket Protocol (nsp)");
    System.out.println("   nhp - Specifies Nirvana HTTP Protocol (nhp)");
    System.out.println("   nsps - Specifies Nirvana Socket Protocol Secure (nsps), i.e. using SSL/TLS");
    System.out.println("   nhps - Specifies Nirvana HTTP Protocol Secure (nhps), i.e. using SSL/TLS");
    System.out.println("   port - The port number of the server");
    System.out.println(
        "\nHint: - For multiple RNAME entries, use comma separated values which will be attempted in connection weight order\n");

    System.out.println(
        "(PRINCIPAL) - This specifies the principal to be used to authenticate with the JNDI provider (Default: anon)\n");
    System.out.println(
        "(PASSWORD) - This specifies the password to be used to authenticate with the JNDI provider (Default: anon)\n");
    System.out.println(
        "(CONTEXT_FACTORY) - This specifies the JNDI provider context factory (Default: com.pcbsys.nirvana.nSpace.NirvanaContextFactory)\n");
    System.out.println("(PROVIDER_URL) - This specifies the JNDI provider URL (Default: nsp://127.0.0.1:9000)\n");

    System.out.println(
        "(LOGLEVEL) - This determines how much information the nirvana api will output 0 = verbose 7 = quiet\n");

    System.out.println("(CKEYSTORE) - If using SSL, the location of the keystore containing the client cert\n");
    System.out.println("(CKEYSTOREPASSWD) - If using SSL, the password for the keystore containing the client cert\n");
    System.out.println("(CAKEYSTORE) - If using SSL, the location of the ca truststore\n");
    System.out.println("(CAKEYSTOREPASSWD) - If using SSL, the password for the ca truststore\n");

    System.out.println("(HPROXY) - HTTP Proxy details in the form proxyhost:proxyport, where:");
    System.out.println("   proxyhost - The HTTP proxy host");
    System.out.println("   proxyport - The HTTP proxy port\n");
    System.out.println("(HAUTH) - HTTP Proxy authentication details in the form user:pass, where:");
    System.out.println("   user - The HTTP proxy authentication username");
    System.out.println("   pass - The HTTP proxy authentication password\n\n\n");

    System.out.println(
        "(nirvana.globalStoreCapacity) - This specifies the default store capacity that should be used if no override is specified using the [capacity] setting. (Default: 0)");
    System.exit(1);
  }

  private static void processArgs(String[] args) {
    switch (args.length) {
      case 1:
        if (args[0].equals("-?")) {
          UsageEnv();
        }

        break;
    }
  }

  private static void processEnvironmentVariable(String variable) {
    String laxVAR = fSystemConfiguration.getProperty(LAX_NL_ENV_ + variable);
    if (laxVAR == null) {
      laxVAR = System.getenv(variable);
    }
    if (laxVAR != null) {
      if (fEnvironment.CKEYSTORE.equals(variable)) {
        variable = nSessionAttributes.KEYSTORE_PATH;
        System.clearProperty(fEnvironment.CKEYSTORE);
      } else if (fEnvironment.CKEYSTOREPASSWD.equals(variable)) {
        variable = nSessionAttributes.KEYSTORE_PASSWORD;
        System.clearProperty(fEnvironment.CKEYSTOREPASSWD);
      } else if (fEnvironment.CAKEYSTORE.equals(variable)) {
        variable = nSessionAttributes.TRUSTSTORE_PATH;
        System.clearProperty(fEnvironment.CAKEYSTORE);
      } else if (fEnvironment.CAKEYSTOREPASSWD.equals(variable)) {
        variable = nSessionAttributes.TRUSTSTORE_PASSWORD;
        System.clearProperty(fEnvironment.CAKEYSTOREPASSWD);
      }
      System.setProperty(variable, laxVAR);
    }
  }

  public static void main(String[] args) {
    //Process command line arguments
    processArgs(args);

    //Process Environment Variables
    processEnvironmentVariable("RNAME");
    processEnvironmentVariable("PRINCIPAL");
    processEnvironmentVariable("PASSWORD");
    processEnvironmentVariable("CONTEXT_FACTORY");
    processEnvironmentVariable("PROVIDER_URL");
    processEnvironmentVariable("LOGLEVEL");
    processEnvironmentVariable("HPROXY");
    processEnvironmentVariable("HAUTH");
    processEnvironmentVariable("CKEYSTORE");
    processEnvironmentVariable("CKEYSTOREPASSWD");
    processEnvironmentVariable("CAKEYSTORE");
    processEnvironmentVariable("CAKEYSTOREPASSWD");

    // Install any proxy server settings
    fEnvironment.setProxyEnvironments();

    // Install any ssl settings
    fEnvironment.setSSLEnvironments();

    JMSAdmin jMSAdmin = new JMSAdmin();
    if (args.length < 1) {
      usage();
      System.exit(1);
    }

    String ctype = args[0];
    String wtype = null;
    String uname = null;
    if (args.length == 3) {
      wtype = args[1];
      uname = args[2];
    }

    boolean sync = false;
    int capacity = 0;

    if (args.length > 3) {
      wtype = args[1];
      uname = args[2];
      sync = ((args[3].equals("true")) ? true : false);
    }

    if (args.length > 4) {
      capacity = Integer.parseInt(args[4]);
    }

    if (args.length > 5) {
      Constants.setEnableSharedDurable(Boolean.parseBoolean(args[5]));
    }

    try {
      jMSAdmin.doIt(ctype, wtype, uname, sync, capacity);
    } catch (Exception ex) {
      ex.printStackTrace();
      System.exit(1);
    }
  }

  //
  //---------------------------------------------------------------------------
  // JMSAdmin Constructor
  //---------------------------------------------------------------------------
  //
  private void doUnBind(String wtype, String uname) throws Exception {
    if (wtype.equalsIgnoreCase("topicFactory")) {
      this.deleteTopicConnectionFactory(uname);
    } else if (wtype.equalsIgnoreCase("connectionFactory")) {
      this.deleteConnectionFactory(uname);
    } else if (wtype.equalsIgnoreCase("xaconnectionFactory")) {
      this.deleteConnectionFactory(uname);
    } else if (wtype.equalsIgnoreCase("queueFactory")) {
      this.deleteQueueConnectionFactory(uname);
    } else if (wtype.equalsIgnoreCase("topic")) {
      this.deleteTopic(uname);
    } else if (wtype.equalsIgnoreCase("queue")) {
      this.deleteQueue(uname);
    } else {
      usage();
    }
  }

  private void doBind(String wtype, String uname, boolean sync, int capacity) throws Exception {
    if (wtype.equalsIgnoreCase("topicFactory")) {
      this.createTopicConnectionFactory(uname);
    } else if (wtype.equalsIgnoreCase("queueFactory")) {
      this.createQueueConnectionFactory(uname);
    } else if (wtype.equalsIgnoreCase("connectionFactory")) {
      this.createConnectionFactory(uname);
    } else if (wtype.equalsIgnoreCase("xaconnectionFactory")) {
      this.createXAConnectionFactory(uname);
    } else if (wtype.equalsIgnoreCase("topic")) {
      this.createTopic(uname, sync, capacity);
    } else if (wtype.equalsIgnoreCase("queue")) {
      this.createQueue(uname, sync, capacity);
    } else {
      usage();
    }
  }

  public void doIt(String ctype, String wtype, String uname, boolean sync, int capacity) throws Exception {
    try {
      Hashtable env = new Hashtable();
      env.put(Context.INITIAL_CONTEXT_FACTORY,
          fSystemConfiguration.getProperty(CONTEXT_FACTORY, DEFAULT_CONTEXT_FACTORY));
      env.put(Context.PROVIDER_URL, fSystemConfiguration
          .getProperty(PROVIDER_URL, fSystemConfiguration.getProperty(RNAME, DEFAULT_RNAME)));
      env.put(SECURITY_AUTHENTICATION, SECURITY_AUTHENTICATION);
      env.put(Context.SECURITY_PRINCIPAL, fSystemConfiguration.getProperty(PRINCIPAL, DEFAULT_PRINCIPAL));
      env.put(Context.SECURITY_CREDENTIALS, fSystemConfiguration.getProperty(PASSWORD, DEFAULT_PASSWORD));
      rname = fSystemConfiguration.getProperty(RNAME, DEFAULT_RNAME);
      ictx = new InitialContext(env);
      nSessionAttributes attributes = new nSessionAttributes(rname);
      attributes.setName("UM JMSAdmin");
      mysession = nSessionFactory.create(attributes);
      mysession.init();
      if (ctype.equalsIgnoreCase("bind")) {
        doBind(wtype, uname, sync, capacity);
      } else if (ctype.equalsIgnoreCase("unbind")) {
        doUnBind(wtype, uname);
      } else if (ctype.equalsIgnoreCase("list")) {
        NamingEnumeration ne = ictx.list("");
        while (ne.hasMoreElements()) {
          NameClassPair pair = (NameClassPair) ne.nextElement();
          Object obj = ictx.lookup(pair.getName());
          Binding binding = new Binding(pair.getName(), pair.getClassName(), obj);
          System.out.println(binding.getName() + ":" + binding.getClassName());
        }
      } else {
        usage();
      }
    } finally {
      if (mysession != null) {
        nSessionFactory.close(mysession);
      }
      if (ictx != null) {
        ictx.close();
      }
    }
  }

  public void createStringVal(String name, String val) {
    try {
      ictx.rebind(name, val);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public void createQueueConnectionFactory(String name) {
    try {
      QueueConnectionFactory qcf = new com.pcbsys.nirvana.nJMS.QueueConnectionFactoryImpl(new com.pcbsys.nirvana.nJMS.DestinationImpl(rname));
      ictx.rebind(name, qcf);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public void createTopicConnectionFactory(String name) {
    try {
      TopicConnectionFactory tcf = new com.pcbsys.nirvana.nJMS.TopicConnectionFactoryImpl(new com.pcbsys.nirvana.nJMS.DestinationImpl(rname));
      ictx.rebind(name, tcf);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public void createConnectionFactory(String name) {
    try {
      ConnectionFactory cf;
      cf = new com.pcbsys.nirvana.nJMS.ConnectionFactoryImpl(new com.pcbsys.nirvana.nJMS.DestinationImpl(rname));
      ictx.rebind(name, cf);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public void createXAConnectionFactory(String name) {
    try {
      com.pcbsys.nirvana.nJMS.XAConnectionFactoryImpl cf = new com.pcbsys.nirvana.nJMS.XAConnectionFactoryImpl(rname);
      ictx.rebind(name, cf);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public void createQueue(String name, boolean sync, int capacity) {
    nChannelAttributes nca = new nChannelAttributes();
    try {
      nca.setName(name.replace(dot, slash));
      nca.setType(nChannelAttributes.MIXED_TYPE);
      if (sync) {
        nca.getProperties().setSyncOnEachWrite(sync);
      }
      if (capacity > 0) {
        nca.setMaxEvents(capacity);
        nca.getProperties().setHonorCapacityWhenFull(true);
      } else {
        int globalCapacity = Constants.getGlobalStoreCapacity();
        if (globalCapacity > 0) {
          nca.setMaxEvents(globalCapacity);
          nca.getProperties().setHonorCapacityWhenFull(true);
        }
      }
      nca.getProperties().setPerformAutomaticMaintenance(true);
      mysession.createQueue(nca);
    } catch (nChannelAlreadyExistsException e) {
    } catch (Exception e) {
      e.printStackTrace();
    }

    try {
      com.pcbsys.nirvana.nJMS.QueueImpl queue = new com.pcbsys.nirvana.nJMS.QueueImpl(name);
      ictx.rebind(name, queue);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public void createTopic(String name, boolean sync, int capacity) {
    nChannelAttributes nca = new nChannelAttributes();
    try {
      nca.setName(name.replace(dot, slash));
      nca.setType(nChannelAttributes.MIXED_TYPE);
      nca.useJMSEngine(true);
      if (sync) {
        nca.getProperties().setSyncOnEachWrite(sync);
      }
      if (capacity > 0) {
        nca.setMaxEvents(capacity);
        nca.getProperties().setHonorCapacityWhenFull(true);
      } else {
        int globalCapacity = Constants.getGlobalStoreCapacity();
        if (globalCapacity > 0) {
          nca.setMaxEvents(globalCapacity);
          nca.getProperties().setHonorCapacityWhenFull(true);
        }
      }
      nca.getProperties().setPerformAutomaticMaintenance(true);
      mysession.createChannel(nca);
    } catch (com.pcbsys.nirvana.client.nChannelAlreadyExistsException ncaee) {
    } catch (Exception e) {
      e.printStackTrace();
    }

    try {
      com.pcbsys.nirvana.nJMS.TopicImpl topic = new com.pcbsys.nirvana.nJMS.TopicImpl(name);
      ictx.rebind(name, topic);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public void deleteQueue(String name) {
    try {
      nChannelAttributes nca = new nChannelAttributes();
      nca.setName(name.replace(dot, slash));
      mysession.deleteQueue(nca);
    } catch (nChannelNotFoundException e) {
    } catch (Exception e) {
      e.printStackTrace();
    }

    try {
      ictx.unbind(name);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public void deleteTopic(String name) {
    try {
      nChannelAttributes nca = new nChannelAttributes();
      nca.setName(name.replace(dot, slash));
      mysession.deleteChannel(nca);
    } catch (nChannelNotFoundException e) {
    } catch (Exception e) {
      e.printStackTrace();
    }

    try {
      ictx.unbind(name);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public void deleteTopicConnectionFactory(String name) {
    try {
      ictx.unbind(name);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public void deleteConnectionFactory(String name) {
    try {
      ictx.unbind(name);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public void deleteQueueConnectionFactory(String name) {
    try {
      ictx.unbind(name);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
} // End of JMSAdmin Class
