/*
 *
 *   Copyright (c) 1999 - 2011 my-Channels Ltd
 *   Copyright (c) 2012 - 2022 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.
 *
 *   Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG.
 *
 */

package com.pcbsys.nirvana.nJMSApps;

import com.pcbsys.foundation.utils.fEnvironment;
import com.pcbsys.nirvana.client.nSessionAttributes;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Hashtable;
import javax.jms.TextMessage;
import javax.jms.Topic;
import javax.jms.TopicConnection;
import javax.jms.TopicConnectionFactory;
import javax.jms.TopicPublisher;
import javax.jms.TopicSession;
import javax.naming.Context;
import javax.naming.InitialContext;

public class JMSTest {

  public JMSTest() {
  }


  public static void main(String[] args) {
    JMSTest jmsTest = new JMSTest();

    if (args.length == 1 && args[0].equals("-?")) {
      UsageEnv();
    }
    if (args.length < 2) {
      usage();
    }

    //Process Environment Variables
    processEnvironmentVariable("RNAME");
    processEnvironmentVariable("PRINCIPAL");
    processEnvironmentVariable("PASSWORD");
    processEnvironmentVariable("CONTEXT_FACTORY");
    processEnvironmentVariable("PROVIDER_URL");
    processEnvironmentVariable("LOGLEVEL");
    processEnvironmentVariable("HPROXY");
    processEnvironmentVariable("HAUTH");
    processEnvironmentVariable("CKEYSTORE");
    processEnvironmentVariable("CKEYSTOREPASSWD");
    processEnvironmentVariable("CAKEYSTORE");
    processEnvironmentVariable("CAKEYSTOREPASSWD");

    // Install any proxy server settings
    fEnvironment.setProxyEnvironments();

    // Install any ssl settings
    fEnvironment.setSSLEnvironments();

    try {
      jmsTest.doIt(args[0], args[1]);
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }

  private static void UsageEnv() {
    System.out.println("\n\n(Environment Variables) \n");

    System.out.println("(RNAME) - One or more RNAME entries in the form protocol://host:port");
    System.out.println("   protocol - Can be one of nsp, nhp, nsps, or nhps, where:");
    System.out.println("   nsp - Specifies Nirvana Socket Protocol (nsp)");
    System.out.println("   nhp - Specifies Nirvana HTTP Protocol (nhp)");
    System.out.println("   nsps - Specifies Nirvana Socket Protocol Secure (nsps), i.e. using SSL/TLS");
    System.out.println("   nhps - Specifies Nirvana HTTP Protocol Secure (nhps), i.e. using SSL/TLS");
    System.out.println("   port - The port number of the server");
    System.out.println(
        "\nHint: - For multiple RNAME entries, use comma separated values which will be attempted in connection weight order\n");

    System.out.println(
        "(PRINCIPAL) - This specifies the principal to be used to authenticate with the JNDI provider (Default: anon)\n");
    System.out.println(
        "(PASSWORD) - This specifies the password to be used to authenticate with the JNDI provider (Default: anon)\n");
    System.out.println(
        "(CONTEXT_FACTORY) - This specifies the JNDI provider context factory (Default: com.pcbsys.nirvana.nSpace.NirvanaContextFactory)\n");
    System.out.println("(PROVIDER_URL) - This specifies the JNDI provider URL (Default: nsp://127.0.0.1:9000)\n");

    System.out.println(
        "(LOGLEVEL) - This determines how much information the nirvana api will output 0 = verbose 7 = quiet\n");

    System.out.println("(CKEYSTORE) - If using SSL, the location of the keystore containing the client cert\n");
    System.out.println("(CKEYSTOREPASSWD) - If using SSL, the password for the keystore containing the client cert\n");
    System.out.println("(CAKEYSTORE) - If using SSL, the location of the ca truststore\n");
    System.out.println("(CAKEYSTOREPASSWD) - If using SSL, the password for the ca truststore\n");

    System.out.println("(HPROXY) - HTTP Proxy details in the form proxyhost:proxyport, where:");
    System.out.println("   proxyhost - The HTTP proxy host");
    System.out.println("   proxyport - The HTTP proxy port\n");
    System.out.println("(HAUTH) - HTTP Proxy authentication details in the form user:pass, where:");
    System.out.println("   user - The HTTP proxy authentication username");
    System.out.println("   pass - The HTTP proxy authentication password\n");
    System.exit(1);
  }

  public void doIt(String factoryName, String topicName) throws Exception {
    Hashtable env = new Hashtable();
    env.put(Context.INITIAL_CONTEXT_FACTORY,
        System.getProperty("CONTEXT_FACTORY", "com.pcbsys.nirvana.nSpace.NirvanaContextFactory"));
    env.put(Context.PROVIDER_URL, System.getProperty("PROVIDER_URL", "nsp://127.0.0.1:9000"));
    env.put(Context.SECURITY_AUTHENTICATION, "simple");
    env.put(Context.SECURITY_PRINCIPAL, System.getProperty("PRINCIPAL", "simple"));
    env.put(Context.SECURITY_CREDENTIALS, System.getProperty("PASSWORD", "simple"));
    Context ctx = new InitialContext(env);
    Topic t = (Topic) ctx.lookup(topicName);
    TopicConnectionFactory tcf = (TopicConnectionFactory) ctx.lookup(factoryName);
    TopicConnection tc = tcf.createTopicConnection();
    tc.start();
    TopicSession ts = tc.createTopicSession(false, 1);
    TopicPublisher tp = ts.createPublisher(t);
    System.out.println("Enter Q to finish publishing : ");
    while (true) {
      //Prepare to read from System.in
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in), 1);

      //Prompt for a message
      System.out.print("Enter a Message to be published : ");
      //Read a line from System.in
      String str = br.readLine();

      //If the message to be published is equal to 'Q', then exit the loop
      if (str.equalsIgnoreCase("Q")) {
        //Print a message to the console saying we are about to exit
        System.out.println("Closing topic session and topic connection");
        //Close the Topic Session
        ts.close();
        //Close the Topic Connection
        tc.close();
        //Close the Context
        ctx.close();
        //Exit the loop
        break;
      }

      //Create the JMS Message object
      TextMessage tmsg = ts.createTextMessage();

      //Set the message text
      tmsg.setText(str);
      //Publish the message to the topic
      tp.publish(tmsg);
    }
  }

  private static void usage() {
    System.out.println("Usage ...\n\n");
    System.out.println("jmsproviderpub <factoryName> <topicName>\n\n");
    System.out.println("<Required Arguments> \n");
    System.out.println("<factoryName> - JMS TopicFactory to use");
    System.out.println("<topicName> - JMS Topic to publish on");

    System.out.println("\n\nNote: -? provides help on environment variables \n");

    System.exit(1);
  }


  private static void processEnvironmentVariable(String variable) {
    String laxVAR = System.getProperty("lax.nl.env." + variable);
    if (laxVAR == null) {
      laxVAR = System.getenv(variable);
    }
    if (laxVAR != null) {
      if (fEnvironment.CKEYSTORE.equals(variable)) {
        variable = nSessionAttributes.KEYSTORE_PATH;
        System.clearProperty(fEnvironment.CKEYSTORE);
      } else if (fEnvironment.CKEYSTOREPASSWD.equals(variable)) {
        variable = nSessionAttributes.KEYSTORE_PASSWORD;
        System.clearProperty(fEnvironment.CKEYSTOREPASSWD);
      } else if (fEnvironment.CAKEYSTORE.equals(variable)) {
        variable = nSessionAttributes.TRUSTSTORE_PATH;
        System.clearProperty(fEnvironment.CAKEYSTORE);
      } else if (fEnvironment.CAKEYSTOREPASSWD.equals(variable)) {
        variable = nSessionAttributes.TRUSTSTORE_PASSWORD;
        System.clearProperty(fEnvironment.CAKEYSTOREPASSWD);
      }
      System.setProperty(variable, laxVAR);
    }
  }
}
