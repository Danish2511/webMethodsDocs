/*
 *
 *   Copyright (c) 1999 - 2011 my-Channels Ltd
 *   Copyright (c) 2012 - 2022 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.
 *
 *   Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG.
 *
 */
package com.pcbsys.nirvana.nAdminAPI.apps;

import com.pcbsys.nirvana.apps.nSampleApp;
import com.pcbsys.nirvana.client.nSessionAttributes;
import com.pcbsys.nirvana.nAdminAPI.nConfigEntry;
import com.pcbsys.nirvana.nAdminAPI.nConfigGroup;
import com.pcbsys.nirvana.nAdminAPI.nRealmNode;
import com.pcbsys.nirvana.nAdminAPI.xml.ConfigGroup;
import com.pcbsys.nirvana.nAdminAPI.xml.ConfigItem;
import com.pcbsys.nirvana.nAdminAPI.xml.NirvanaRealm;
import com.pcbsys.nirvana.nAdminAPI.xml.ObjectFactory;
import com.pcbsys.nirvana.nAdminAPI.xml.RealmConfiguration;
import java.io.BufferedInputStream;
import java.util.Enumeration;
import java.util.GregorianCalendar;
import java.util.List;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

/**
 * This class demonstrates how you can set the configuration parameters for a realm server using
 * the admin api.
 * It also demonstrates how to observe the realm for changes to the realm configuration.
 * Using the observable / observer pattern, this application is notifed of any changes
 * to the realm configuration.
 */
public class nSettingConfigXML extends nSampleApp {

  private String realmUrl = null;

  /**
   * Consructor for the nSettingConfig program takes a realm URL
   */
  public nSettingConfigXML(String[] args) {
    try {
      processArgs(args);
      System.out.println("Connecting to " + realmUrl);
      // construct the session attributes for the realm
      nSessionAttributes attr = new nSessionAttributes(realmUrl);
      // construct the the realm node
      nRealmNode node = new nRealmNode(attr);
      // get the configuration groups from the realm node
      Enumeration enum1 = node.getConfigGroups();
      // output the enumeration of config groups

      // create a JAXBContext
      JAXBContext jc = JAXBContext.newInstance("com.pcbsys.nirvana.nAdminAPI.xml");

      // create an ObjectFactory instance.
      // if the JAXBContext had been created with mutiple pacakge names,
      // we would have to explicitly use the correct package name when
      // creating the ObjectFactory.
      ObjectFactory objFactory = new ObjectFactory();

      NirvanaRealm realm = objFactory.createNirvanaRealm();

      realm.setComment("Realm configuration from " + realmUrl);

      realm.setName(node.getRealm().getName());

      GregorianCalendar cal = new GregorianCalendar();
      XMLGregorianCalendar xmlCal = DatatypeFactory.newInstance().newXMLGregorianCalendar(cal);

      realm.setExportDate(xmlCal);

      RealmConfiguration rconfig = objFactory.createRealmConfiguration();

      List grouplist = rconfig.getConfigGroup();

      while (enum1.hasMoreElements()) {
        // call the method that will display the config elements for a donfig group
        ConfigGroup grp = createGroup(objFactory, (nConfigGroup) enum1.nextElement());
        grouplist.add(grp);
      }
      realm.setRealmConfiguration(rconfig);

      // create a Marshaller and marshal to System.out
      Marshaller m = jc.createMarshaller();
      m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
      m.marshal(realm, System.out);

      System.out.println("Press any key to quit !");
      BufferedInputStream bis = new BufferedInputStream(System.in);
      try {
        bis.read();
      } catch (Exception read) {
      }
      node.close();
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }

  /**
   * Display the entries for a config group
   */
  private ConfigGroup createGroup(ObjectFactory objFact, nConfigGroup grp) throws JAXBException {
    ConfigGroup group = objFact.createConfigGroup();
    group.setName(grp.getName());
    group.setDescription(grp.getDescription());

    List confitemlist = group.getConfigItem();
    // get the enumeration of config entries
    Enumeration enum1 = grp.getItems();

    while (enum1.hasMoreElements()) {
      // display the entry
      ConfigItem citem = createEntry(objFact, (nConfigEntry) enum1.nextElement());
      confitemlist.add(citem);

    }

    return group;
  }

  private ConfigItem createEntry(ObjectFactory objFact, nConfigEntry ent) throws JAXBException {
    ConfigItem item = objFact.createConfigItem();
    item.setName(ent.getName());
    item.setValue(ent.getValue());
    item.setWarning(ent.getWarning());
    item.setDescription(ent.getDescription());
    return item;
  }

  protected void processArgs(String[] args) {
    if (args.length != 0) {
      switch (args.length) {
        case 1:
          if (args[0].equals("-?")) {
            UsageEnv();
          }
          getOptions(null);
          break;
        default:
          getOptions(args);
      }
    }
  }

  /**
   * Set the program variables and flags based on command line args
   */
  public void getOptions(String args[]) {
    realmUrl = System.getProperty("RNAME", null);
    if (realmUrl == null) {
      Usage();
      System.exit(1);
    }
  }

  /**
   * Main program thread for this application
   */
  public static void main(String[] args) {
    processEnvironmentVariables();

    nSettingConfigXML dump = new nSettingConfigXML(args);
  }

  /**
   * This method is called when a change has occurred on any of the config groups or entries
   * to which this instance has added itself as an observer.
   */
  /**
   * Prints the usage message for this class
   */
  private static void Usage() {

    System.out.println("Usage ...\n");
    System.out.println("nrealmconfig \n");
    System.out.println("\n\nNote: -? provides help on environment variables \n");
  }
}
