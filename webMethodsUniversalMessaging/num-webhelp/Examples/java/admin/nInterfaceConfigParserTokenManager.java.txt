/*
 *
 *   Copyright (c) 1999 - 2011 my-Channels Ltd
 *   Copyright (c) 2012 - 2022 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.
 *
 *   Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG.
 *
 */

/* nInterfaceConfigParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. nInterfaceConfigParserTokenManager.java */
package com.pcbsys.nirvana.nAdminAPI.apps;

/** Token Manager. */
@SuppressWarnings("unused")
public class nInterfaceConfigParserTokenManager implements nInterfaceConfigParserConstants {

  /** Debug output. */
  public java.io.PrintStream debugStream = System.out;

  /** Set debug output. */
  public void setDebugStream(java.io.PrintStream ds) {
    debugStream = ds;
  }

  private final int jjStopStringLiteralDfa_0(int pos, long active0) {
    switch (pos) {
      case 0:
        if ((active0 & 0x800000000L) != 0L) {
          jjmatchedKind = 47;
          return 90;
        }
        if ((active0 & 0x3c0L) != 0L) {
          jjmatchedKind = 47;
          return 135;
        }
        if ((active0 & 0x1ff000000000L) != 0L) {
          jjmatchedKind = 47;
          return 17;
        }
        if ((active0 & 0x20000000L) != 0L) {
          jjmatchedKind = 47;
          return 36;
        }
        return -1;
      case 1:
        if ((active0 & 0x280L) != 0L) {
          jjmatchedKind = 48;
          jjmatchedPos = 1;
          return 143;
        }
        if ((active0 & 0x140L) != 0L) {
          jjmatchedKind = 48;
          jjmatchedPos = 1;
          return 141;
        }
        if ((active0 & 0x800000000L) != 0L) {
          jjmatchedKind = 48;
          jjmatchedPos = 1;
          return 105;
        }
        if ((active0 & 0x1ff020000000L) != 0L) {
          jjmatchedKind = 48;
          jjmatchedPos = 1;
          return 17;
        }
        return -1;
      case 2:
        if ((active0 & 0x3c0L) != 0L) {
          return 166;
        }
        if ((active0 & 0x1fa020000000L) != 0L) {
          if (jjmatchedPos != 2) {
            jjmatchedKind = 48;
            jjmatchedPos = 2;
          }
          return 17;
        }
        if ((active0 & 0x5800000000L) != 0L) {
          return 17;
        }
        return -1;
      case 3:
        if ((active0 & 0x300L) != 0L) {
          return 167;
        }
        if ((active0 & 0x42020000000L) != 0L) {
          if (jjmatchedPos != 3) {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
          }
          return 17;
        }
        if ((active0 & 0x1b8000000000L) != 0L) {
          return 17;
        }
        return -1;
      case 4:
        if ((active0 & 0x12020000000L) != 0L) {
          jjmatchedKind = 48;
          jjmatchedPos = 4;
          return 17;
        }
        if ((active0 & 0x40000000000L) != 0L) {
          return 17;
        }
        return -1;
      case 5:
        if ((active0 & 0x12020000000L) != 0L) {
          jjmatchedKind = 48;
          jjmatchedPos = 5;
          return 17;
        }
        return -1;
      case 6:
        if ((active0 & 0x20000000L) != 0L) {
          jjmatchedKind = 48;
          jjmatchedPos = 6;
          return 17;
        }
        if ((active0 & 0x12000000000L) != 0L) {
          return 17;
        }
        return -1;
      case 7:
        if ((active0 & 0x20000000L) != 0L) {
          jjmatchedKind = 48;
          jjmatchedPos = 7;
          return 17;
        }
        return -1;
      case 8:
        if ((active0 & 0x20000000L) != 0L) {
          jjmatchedKind = 48;
          jjmatchedPos = 8;
          return 17;
        }
        return -1;
      case 9:
        if ((active0 & 0x20000000L) != 0L) {
          jjmatchedKind = 48;
          jjmatchedPos = 9;
          return 17;
        }
        return -1;
      case 10:
        if ((active0 & 0x20000000L) != 0L) {
          jjmatchedKind = 48;
          jjmatchedPos = 10;
          return 17;
        }
        return -1;
      case 11:
        if ((active0 & 0x20000000L) != 0L) {
          jjmatchedKind = 48;
          jjmatchedPos = 11;
          return 17;
        }
        return -1;
      case 12:
        if ((active0 & 0x20000000L) != 0L) {
          jjmatchedKind = 48;
          jjmatchedPos = 12;
          return 17;
        }
        return -1;
      case 13:
        if ((active0 & 0x20000000L) != 0L) {
          jjmatchedKind = 48;
          jjmatchedPos = 13;
          return 17;
        }
        return -1;
      case 14:
        if ((active0 & 0x20000000L) != 0L) {
          jjmatchedKind = 48;
          jjmatchedPos = 14;
          return 17;
        }
        return -1;
      case 15:
        if ((active0 & 0x20000000L) != 0L) {
          jjmatchedKind = 48;
          jjmatchedPos = 15;
          return 17;
        }
        return -1;
      case 16:
        if ((active0 & 0x20000000L) != 0L) {
          jjmatchedKind = 48;
          jjmatchedPos = 16;
          return 17;
        }
        return -1;
      default:
        return -1;
    }
  }

  private final int jjStartNfa_0(int pos, long active0) {
    return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
  }

  private int jjStopAtPos(int pos, int kind) {
    jjmatchedKind = kind;
    jjmatchedPos = pos;
    return pos + 1;
  }

  private int jjMoveStringLiteralDfa0_0() {
    switch (curChar) {
      case 10:
        return jjStopAtPos(0, 5);
      case 58:
        jjmatchedKind = 54;
        return jjMoveStringLiteralDfa1_0(0x4000000000000L);
      case 61:
        return jjStopAtPos(0, 55);
      case 65:
      case 97:
        return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 67:
      case 99:
        return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 68:
      case 100:
        return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 69:
      case 101:
        return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 72:
      case 104:
        return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 76:
      case 108:
        return jjMoveStringLiteralDfa1_0(0x18000000000L);
      case 77:
      case 109:
        return jjMoveStringLiteralDfa1_0(0x3000000000L);
      case 78:
      case 110:
        return jjMoveStringLiteralDfa1_0(0x3c0L);
      case 83:
      case 115:
        return jjMoveStringLiteralDfa1_0(0x60000000000L);
      default:
        return jjMoveNfa_0(6, 0);
    }
  }

  private int jjMoveStringLiteralDfa1_0(long active0) {
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
    }
    switch (curChar) {
      case 47:
        return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L);
      case 68:
      case 100:
        return jjMoveStringLiteralDfa2_0(active0, 0x800000000L);
      case 69:
      case 101:
        return jjMoveStringLiteralDfa2_0(active0, 0x104000000000L);
      case 72:
      case 104:
        return jjMoveStringLiteralDfa2_0(active0, 0x280L);
      case 73:
      case 105:
        return jjMoveStringLiteralDfa2_0(active0, 0x18000000000L);
      case 76:
      case 108:
        return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      case 79:
      case 111:
        return jjMoveStringLiteralDfa2_0(active0, 0x3000000000L);
      case 83:
      case 115:
        return jjMoveStringLiteralDfa2_0(active0, 0x140L);
      case 84:
      case 116:
        return jjMoveStringLiteralDfa2_0(active0, 0x60000000000L);
      case 88:
      case 120:
        return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L);
      default:
        break;
    }
    return jjStartNfa_0(0, active0);
  }

  private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return jjStartNfa_0(0, old0);
    }
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
    }
    switch (curChar) {
      case 47:
        if ((active0 & 0x4000000000000L) != 0L) {
          return jjStopAtPos(2, 50);
        }
        break;
      case 65:
      case 97:
        return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
      case 68:
      case 100:
        if ((active0 & 0x800000000L) != 0L) {
          return jjStartNfaWithStates_0(2, 35, 17);
        } else if ((active0 & 0x1000000000L) != 0L) {
          return jjStartNfaWithStates_0(2, 36, 17);
        }
        break;
      case 73:
      case 105:
        return jjMoveStringLiteralDfa3_0(active0, 0x80020000000L);
      case 76:
      case 108:
        if ((active0 & 0x4000000000L) != 0L) {
          return jjStartNfaWithStates_0(2, 38, 17);
        }
        return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L);
      case 78:
      case 110:
        return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 79:
      case 111:
        return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
      case 80:
      case 112:
        if ((active0 & 0x40L) != 0L) {
          jjmatchedKind = 6;
          jjmatchedPos = 2;
        } else if ((active0 & 0x80L) != 0L) {
          jjmatchedKind = 7;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(active0, 0x300L);
      case 83:
      case 115:
        return jjMoveStringLiteralDfa3_0(active0, 0x18000000000L);
      default:
        break;
    }
    return jjStartNfa_0(1, active0);
  }

  private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return jjStartNfa_0(1, old0);
    }
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
    }
    switch (curChar) {
      case 69:
      case 101:
        return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 73:
      case 105:
        return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 80:
      case 112:
        if ((active0 & 0x20000000000L) != 0L) {
          return jjStartNfaWithStates_0(3, 41, 17);
        } else if ((active0 & 0x100000000000L) != 0L) {
          return jjStartNfaWithStates_0(3, 44, 17);
        }
        break;
      case 82:
      case 114:
        return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      case 83:
      case 115:
        if ((active0 & 0x100L) != 0L) {
          return jjStartNfaWithStates_0(3, 8, 167);
        } else if ((active0 & 0x200L) != 0L) {
          return jjStartNfaWithStates_0(3, 9, 167);
        }
        break;
      case 84:
      case 116:
        if ((active0 & 0x8000000000L) != 0L) {
          jjmatchedKind = 39;
          jjmatchedPos = 3;
        } else if ((active0 & 0x80000000000L) != 0L) {
          return jjStartNfaWithStates_0(3, 43, 17);
        }
        return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      default:
        break;
    }
    return jjStartNfa_0(2, active0);
  }

  private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return jjStartNfa_0(2, old0);
    }
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
    }
    switch (curChar) {
      case 65:
      case 97:
        return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 78:
      case 110:
        return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 84:
      case 116:
        if ((active0 & 0x40000000000L) != 0L) {
          return jjStartNfaWithStates_0(4, 42, 17);
        }
        return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      default:
        break;
    }
    return jjStartNfa_0(3, active0);
  }

  private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return jjStartNfa_0(3, old0);
    }
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
    }
    switch (curChar) {
      case 76:
      case 108:
        return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L);
      case 79:
      case 111:
        return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 84:
      case 116:
        return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      default:
        break;
    }
    return jjStartNfa_0(4, active0);
  }

  private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return jjStartNfa_0(4, old0);
    }
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
    }
    switch (curChar) {
      case 67:
      case 99:
        return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 76:
      case 108:
        if ((active0 & 0x10000000000L) != 0L) {
          return jjStartNfaWithStates_0(6, 40, 17);
        }
        break;
      case 82:
      case 114:
        if ((active0 & 0x2000000000L) != 0L) {
          return jjStartNfaWithStates_0(6, 37, 17);
        }
        break;
      default:
        break;
    }
    return jjStartNfa_0(5, active0);
  }

  private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return jjStartNfa_0(5, old0);
    }
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
    }
    switch (curChar) {
      case 69:
      case 101:
        return jjMoveStringLiteralDfa8_0(active0, 0x20000000L);
      default:
        break;
    }
    return jjStartNfa_0(6, active0);
  }

  private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return jjStartNfa_0(6, old0);
    }
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
    }
    switch (curChar) {
      case 82:
      case 114:
        return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
      default:
        break;
    }
    return jjStartNfa_0(7, active0);
  }

  private int jjMoveStringLiteralDfa9_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return jjStartNfa_0(7, old0);
    }
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
    }
    switch (curChar) {
      case 84:
      case 116:
        return jjMoveStringLiteralDfa10_0(active0, 0x20000000L);
      default:
        break;
    }
    return jjStartNfa_0(8, active0);
  }

  private int jjMoveStringLiteralDfa10_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return jjStartNfa_0(8, old0);
    }
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
    }
    switch (curChar) {
      case 82:
      case 114:
        return jjMoveStringLiteralDfa11_0(active0, 0x20000000L);
      default:
        break;
    }
    return jjStartNfa_0(9, active0);
  }

  private int jjMoveStringLiteralDfa11_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return jjStartNfa_0(9, old0);
    }
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
    }
    switch (curChar) {
      case 69:
      case 101:
        return jjMoveStringLiteralDfa12_0(active0, 0x20000000L);
      default:
        break;
    }
    return jjStartNfa_0(10, active0);
  }

  private int jjMoveStringLiteralDfa12_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return jjStartNfa_0(10, old0);
    }
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
    }
    switch (curChar) {
      case 81:
      case 113:
        return jjMoveStringLiteralDfa13_0(active0, 0x20000000L);
      default:
        break;
    }
    return jjStartNfa_0(11, active0);
  }

  private int jjMoveStringLiteralDfa13_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return jjStartNfa_0(11, old0);
    }
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
    }
    switch (curChar) {
      case 85:
      case 117:
        return jjMoveStringLiteralDfa14_0(active0, 0x20000000L);
      default:
        break;
    }
    return jjStartNfa_0(12, active0);
  }

  private int jjMoveStringLiteralDfa14_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return jjStartNfa_0(12, old0);
    }
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
    }
    switch (curChar) {
      case 73:
      case 105:
        return jjMoveStringLiteralDfa15_0(active0, 0x20000000L);
      default:
        break;
    }
    return jjStartNfa_0(13, active0);
  }

  private int jjMoveStringLiteralDfa15_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return jjStartNfa_0(13, old0);
    }
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
    }
    switch (curChar) {
      case 82:
      case 114:
        return jjMoveStringLiteralDfa16_0(active0, 0x20000000L);
      default:
        break;
    }
    return jjStartNfa_0(14, active0);
  }

  private int jjMoveStringLiteralDfa16_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return jjStartNfa_0(14, old0);
    }
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
    }
    switch (curChar) {
      case 69:
      case 101:
        return jjMoveStringLiteralDfa17_0(active0, 0x20000000L);
      default:
        break;
    }
    return jjStartNfa_0(15, active0);
  }

  private int jjMoveStringLiteralDfa17_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return jjStartNfa_0(15, old0);
    }
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
    }
    switch (curChar) {
      case 68:
      case 100:
        if ((active0 & 0x20000000L) != 0L) {
          return jjStartNfaWithStates_0(17, 29, 17);
        }
        break;
      default:
        break;
    }
    return jjStartNfa_0(16, active0);
  }

  private int jjStartNfaWithStates_0(int pos, int kind, int state) {
    jjmatchedKind = kind;
    jjmatchedPos = pos;
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return pos + 1;
    }
    return jjMoveNfa_0(state, pos + 1);
  }

  static final long[] jjbitVec0 = {0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL};

  private int jjMoveNfa_0(int startState, int curPos) {
    int startsAt = 0;
    jjnewStateCnt = 166;
    int i = 1;
    jjstateSet[0] = startState;
    int kind = 0x7fffffff;
    for (; ; ) {
      if (++jjround == 0x7fffffff) {
        ReInitRounds();
      }
      if (curChar < 64) {
        long l = 1L << curChar;
        do {
          switch (jjstateSet[--i]) {
            case 135:
            case 17:
              if ((0x3ff401000000000L & l) == 0L) {
                break;
              }
              if (kind > 48) {
                kind = 48;
              }
            {
              jjCheckNAdd(17);
            }
            break;
            case 141:
              if ((0x3ff401000000000L & l) == 0L) {
                break;
              }
              if (kind > 48) {
                kind = 48;
              }
            {
              jjCheckNAdd(17);
            }
            break;
            case 36:
              if ((0x3ff401000000000L & l) == 0L) {
                break;
              }
              if (kind > 48) {
                kind = 48;
              }
            {
              jjCheckNAdd(17);
            }
            break;
            case 166:
              if ((0x3ff401000000000L & l) != 0L) {
                if (kind > 48) {
                  kind = 48;
                }
                {
                  jjCheckNAdd(17);
                }
              }
              if ((0x3ff000000000000L & l) != 0L) {
                if (kind > 34) {
                  kind = 34;
                }
                {
                  jjCheckNAdd(137);
                }
              }
              break;
            case 105:
              if ((0x3ff401000000000L & l) == 0L) {
                break;
              }
              if (kind > 48) {
                kind = 48;
              }
            {
              jjCheckNAdd(17);
            }
            break;
            case 167:
              if ((0x3ff401000000000L & l) != 0L) {
                if (kind > 48) {
                  kind = 48;
                }
                {
                  jjCheckNAdd(17);
                }
              }
              if ((0x3ff000000000000L & l) != 0L) {
                if (kind > 34) {
                  kind = 34;
                }
                {
                  jjCheckNAdd(137);
                }
              }
              break;
            case 6:
              if ((0x3ff401000000000L & l) != 0L) {
                if (kind > 48) {
                  kind = 48;
                }
                {
                  jjCheckNAdd(17);
                }
              } else if (curChar == 39) {
                jjCheckNAdd(20);
              } else if (curChar == 47) {
                if (kind > 49) {
                  kind = 49;
                }
              }
              if ((0x3ff000000000000L & l) != 0L) {
                if (kind > 45) {
                  kind = 45;
                }
                {
                  jjCheckNAdd(15);
                }
              } else if ((0x401000000000L & l) != 0L) {
                if (kind > 47) {
                  kind = 47;
                }
              }
              break;
            case 143:
              if ((0x3ff401000000000L & l) == 0L) {
                break;
              }
              if (kind > 48) {
                kind = 48;
              }
            {
              jjCheckNAdd(17);
            }
            break;
            case 90:
              if ((0x3ff401000000000L & l) == 0L) {
                break;
              }
              if (kind > 48) {
                kind = 48;
              }
            {
              jjCheckNAdd(17);
            }
            break;
            case 15:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 45) {
                kind = 45;
              }
            {
              jjCheckNAdd(15);
            }
            break;
            case 16:
              if ((0x401000000000L & l) != 0L && kind > 47) {
                kind = 47;
              }
              break;
            case 18:
              if (curChar == 47) {
                kind = 49;
              }
              break;
            case 19:
              if (curChar == 39) {
                jjCheckNAdd(20);
              }
              break;
            case 20:
              if ((0x3ff401100000200L & l) != 0L) {
                jjCheckNAddTwoStates(20, 21);
              }
              break;
            case 21:
              if (curChar == 39 && kind > 52) {
                kind = 52;
              }
              break;
            case 137:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 34) {
                kind = 34;
              }
            {
              jjCheckNAdd(137);
            }
            break;
            default:
              break;
          }
        } while (i != startsAt);
      } else if (curChar < 128) {
        long l = 1L << (curChar & 077);
        do {
          switch (jjstateSet[--i]) {
            case 135:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                if (kind > 48) {
                  kind = 48;
                }
                {
                  jjCheckNAdd(17);
                }
              }
              if ((0x10000000100L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 143;
              } else if ((0x8000000080000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 141;
              } else if ((0x800000008000L & l) != 0L) {
                if (kind > 14) {
                  kind = 14;
                }
              }
              if ((0x10000000100L & l) != 0L) {
                jjCheckNAdd(136);
              } else if ((0x8000000080000L & l) != 0L) {
                jjCheckNAdd(136);
              }
              break;
            case 141:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                if (kind > 48) {
                  kind = 48;
                }
                {
                  jjCheckNAdd(17);
                }
              }
              if ((0x1000000010000L & l) != 0L) {
                jjCheckNAdd(140);
              }
              if ((0x1000000010000L & l) != 0L) {
                jjCheckNAdd(137);
              }
              break;
            case 36:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                if (kind > 48) {
                  kind = 48;
                }
                {
                  jjCheckNAdd(17);
                }
              }
              if ((0x20000000200L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 44;
              } else if ((0x2000000020L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 35;
              }
              break;
            case 166:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                if (kind > 48) {
                  kind = 48;
                }
                {
                  jjCheckNAdd(17);
                }
              }
              if ((0x8000000080000L & l) != 0L) {
                jjCheckNAdd(137);
              }
              break;
            case 105:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                if (kind > 48) {
                  kind = 48;
                }
                {
                  jjCheckNAdd(17);
                }
              }
              if ((0x40000000400000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 104;
              }
              break;
            case 167:
            case 17:
              if ((0x7fffffe87fffffeL & l) == 0L) {
                break;
              }
              if (kind > 48) {
                kind = 48;
              }
            {
              jjCheckNAdd(17);
            }
            break;
            case 6:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                if (kind > 48) {
                  kind = 48;
                }
                {
                  jjCheckNAdd(17);
                }
              } else if (curChar == 92) {
                if (kind > 49) {
                  kind = 49;
                }
              }
              if ((0x7fffffe87fffffeL & l) != 0L) {
                if (kind > 47) {
                  kind = 47;
                }
              }
              if ((0x80000000800L & l) != 0L) {
                jjAddStates(0, 1);
              } else if ((0x400000004000L & l) != 0L) {
                jjAddStates(2, 6);
              } else if ((0x10000000100000L & l) != 0L) {
                jjAddStates(7, 9);
              } else if ((0x200000002L & l) != 0L) {
                jjAddStates(10, 12);
              } else if ((0x1000000010000L & l) != 0L) {
                jjAddStates(13, 15);
              } else if ((0x800000008L & l) != 0L) {
                jjAddStates(16, 17);
              } else if ((0x200000002000000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 13;
              } else if ((0x4000000040L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 10;
              } else if ((0x400000004L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 5;
              }
              break;
            case 143:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                if (kind > 48) {
                  kind = 48;
                }
                {
                  jjCheckNAdd(17);
                }
              }
              if ((0x1000000010000L & l) != 0L) {
                jjCheckNAdd(140);
              }
              if ((0x1000000010000L & l) != 0L) {
                jjCheckNAdd(137);
              }
              break;
            case 90:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                if (kind > 48) {
                  kind = 48;
                }
                {
                  jjCheckNAdd(17);
                }
              }
              if ((0x1000000010L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 105;
              } else if ((0x20000000200000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 97;
              }
              if ((0x20000000200000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 89;
              }
              break;
            case 0:
              if ((0x8000000080L & l) != 0L && kind > 10) {
                kind = 10;
              }
              break;
            case 1:
              if ((0x800000008000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 0;
              }
              break;
            case 2:
              if ((0x100000001000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 1;
              }
              break;
            case 3:
              if ((0x80000000800L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 2;
              }
              break;
            case 4:
              if ((0x800000008L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 3;
              }
              break;
            case 5:
              if ((0x200000002L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 4;
              }
              break;
            case 7:
              if ((0x2000000020L & l) != 0L && kind > 14) {
                kind = 14;
              }
              break;
            case 8:
              if ((0x8000000080000L & l) != 0L) {
                jjCheckNAdd(7);
              }
              break;
            case 9:
              if ((0x100000001000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 8;
              }
              break;
            case 10:
              if ((0x200000002L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 9;
              }
              break;
            case 11:
              if ((0x4000000040L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 10;
              }
              break;
            case 12:
              if ((0x8000000080000L & l) != 0L && kind > 14) {
                kind = 14;
              }
              break;
            case 13:
              if ((0x2000000020L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 12;
              }
              break;
            case 14:
              if ((0x200000002000000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 13;
              }
              break;
            case 16:
              if ((0x7fffffe87fffffeL & l) != 0L && kind > 47) {
                kind = 47;
              }
              break;
            case 18:
              if (curChar == 92) {
                kind = 49;
              }
              break;
            case 20:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                jjAddStates(18, 19);
              }
              break;
            case 22:
              if ((0x800000008L & l) != 0L) {
                jjAddStates(16, 17);
              }
              break;
            case 23:
              if ((0x2000000020L & l) != 0L && kind > 24) {
                kind = 24;
              }
              break;
            case 24:
              if ((0x200000002000L & l) != 0L) {
                jjCheckNAdd(23);
              }
              break;
            case 25:
              if ((0x200000002L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 24;
              }
              break;
            case 26:
              if ((0x400000004000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 25;
              }
              break;
            case 27:
              if ((0x2000000020L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 26;
              }
              break;
            case 28:
              if ((0x10000000100000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 27;
              }
              break;
            case 29:
              if ((0x200000002L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 28;
              }
              break;
            case 30:
              if ((0x800000008L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 29;
              }
              break;
            case 31:
              if ((0x20000000200L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 30;
              }
              break;
            case 32:
              if ((0x4000000040L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 31;
              }
              break;
            case 33:
              if ((0x20000000200L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 32;
              }
              break;
            case 34:
              if ((0x10000000100000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 33;
              }
              break;
            case 35:
              if ((0x4000000040000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 34;
              }
              break;
            case 37:
              if ((0x10000000100000L & l) != 0L && kind > 24) {
                kind = 24;
              }
              break;
            case 38:
              if ((0x8000000080000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 37;
              }
              break;
            case 39:
              if ((0x20000000200L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 38;
              }
              break;
            case 40:
              if ((0x100000001000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 39;
              }
              break;
            case 41:
              if ((0x4000000040000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 40;
              }
              break;
            case 42:
              if ((0x2000000020L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 41;
              }
              break;
            case 43:
              if ((0x10000000100L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 42;
              }
              break;
            case 44:
              if ((0x1000000010000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 43;
              }
              break;
            case 45:
              if ((0x20000000200L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 44;
              }
              break;
            case 46:
              if ((0x1000000010000L & l) != 0L) {
                jjAddStates(13, 15);
              }
              break;
            case 47:
              if ((0x2000000020L & l) != 0L && kind > 10) {
                kind = 10;
              }
              break;
            case 48:
              if ((0x400000004000000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 47;
              }
              break;
            case 49:
              if ((0x20000000200L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 48;
              }
              break;
            case 50:
              if ((0x8000000080000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 49;
              }
              break;
            case 51:
              if ((0x100000001000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 50;
              }
              break;
            case 52:
              if ((0x800000008000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 51;
              }
              break;
            case 53:
              if ((0x800000008000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 52;
              }
              break;
            case 54:
              if ((0x2000000020L & l) != 0L && kind > 22) {
                kind = 22;
              }
              break;
            case 55:
              if ((0x200000002000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 54;
              }
              break;
            case 56:
              if ((0x200000002L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 55;
              }
              break;
            case 57:
              if ((0x400000004000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 56;
              }
              break;
            case 58:
              if ((0x400000004000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 57;
              }
              break;
            case 59:
              if ((0x20000000200L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 58;
              }
              break;
            case 60:
              if ((0x8000000080L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 59;
              }
              break;
            case 61:
              if ((0x20000000200000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 60;
              }
              break;
            case 62:
              if ((0x100000001000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 61;
              }
              break;
            case 63:
              if ((0x1000000010L & l) != 0L && kind > 30) {
                kind = 30;
              }
              break;
            case 64:
            case 118:
            case 152:
              if ((0x4000000040000L & l) != 0L) {
                jjCheckNAdd(63);
              }
              break;
            case 65:
              if ((0x800000008000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 64;
              }
              break;
            case 66:
              if ((0x80000000800000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 65;
              }
              break;
            case 67:
              if ((0x8000000080000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 66;
              }
              break;
            case 68:
              if ((0x8000000080000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 67;
              }
              break;
            case 69:
              if ((0x200000002L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 68;
              }
              break;
            case 70:
              if ((0x1000000010000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 69;
              }
              break;
            case 71:
              if ((0x200000002000000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 70;
              }
              break;
            case 72:
              if ((0x2000000020L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 71;
              }
              break;
            case 73:
              if ((0x80000000800L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 72;
              }
              break;
            case 74:
              if ((0x2000000020L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 73;
              }
              break;
            case 75:
              if ((0x10000000100000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 74;
              }
              break;
            case 76:
              if ((0x200000002L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 75;
              }
              break;
            case 77:
              if ((0x40000000400000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 76;
              }
              break;
            case 78:
              if ((0x20000000200L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 77;
              }
              break;
            case 79:
              if ((0x4000000040000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 78;
              }
              break;
            case 80:
              if ((0x200000002L & l) != 0L) {
                jjAddStates(10, 12);
              }
              break;
            case 81:
              if ((0x10000000100000L & l) != 0L && kind > 10) {
                kind = 10;
              }
              break;
            case 82:
              if ((0x20000000200000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 81;
              }
              break;
            case 83:
              if ((0x800000008000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 82;
              }
              break;
            case 84:
              if ((0x2000000020L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 83;
              }
              break;
            case 85:
              if ((0x200000002000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 84;
              }
              break;
            case 86:
              if ((0x20000000200L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 85;
              }
              break;
            case 87:
              if ((0x10000000100000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 86;
              }
              break;
            case 88:
              if ((0x10000000100L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 87;
              }
              break;
            case 89:
              if ((0x10000000100000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 88;
              }
              break;
            case 91:
              if ((0x10000000100000L & l) != 0L && kind > 19) {
                kind = 19;
              }
              break;
            case 92:
              if ((0x4000000040000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 91;
              }
              break;
            case 93:
              if ((0x200000002L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 92;
              }
              break;
            case 94:
              if ((0x10000000100000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 93;
              }
              break;
            case 95:
              if ((0x8000000080000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 94;
              }
              break;
            case 96:
              if ((0x800000008000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 95;
              }
              break;
            case 97:
              if ((0x10000000100000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 96;
              }
              break;
            case 98:
              if ((0x20000000200000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 97;
              }
              break;
            case 99:
              if ((0x2000000020L & l) != 0L && kind > 19) {
                kind = 19;
              }
              break;
            case 100:
              if ((0x8000000080000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 99;
              }
              break;
            case 101:
              if ((0x20000000200L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 100;
              }
              break;
            case 102:
              if ((0x10000000100000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 101;
              }
              break;
            case 103:
              if ((0x4000000040000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 102;
              }
              break;
            case 104:
              if ((0x2000000020L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 103;
              }
              break;
            case 106:
              if ((0x1000000010L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 105;
              }
              break;
            case 107:
              if ((0x10000000100000L & l) != 0L) {
                jjAddStates(7, 9);
              }
              break;
            case 108:
              if ((0x20000000200000L & l) != 0L) {
                jjCheckNAdd(7);
              }
              break;
            case 109:
              if ((0x4000000040000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 108;
              }
              break;
            case 110:
            case 146:
              if ((0x4000000040000L & l) != 0L) {
                jjCheckNAdd(23);
              }
              break;
            case 111:
              if ((0x800000008000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 110;
              }
              break;
            case 112:
              if ((0x10000000100000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 111;
              }
              break;
            case 113:
              if ((0x8000000080000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 112;
              }
              break;
            case 114:
              if ((0x10000000100000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 113;
              }
              break;
            case 115:
              if ((0x8000000080000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 114;
              }
              break;
            case 116:
              if ((0x20000000200000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 115;
              }
              break;
            case 117:
              if ((0x4000000040000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 116;
              }
              break;
            case 119:
              if ((0x800000008000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 118;
              }
              break;
            case 120:
              if ((0x80000000800000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 119;
              }
              break;
            case 121:
              if ((0x8000000080000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 120;
              }
              break;
            case 122:
              if ((0x8000000080000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 121;
              }
              break;
            case 123:
              if ((0x200000002L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 122;
              }
              break;
            case 124:
              if ((0x1000000010000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 123;
              }
              break;
            case 125:
              if ((0x2000000020L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 124;
              }
              break;
            case 126:
              if ((0x4000000040000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 125;
              }
              break;
            case 127:
              if ((0x800000008000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 126;
              }
              break;
            case 128:
              if ((0x10000000100000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 127;
              }
              break;
            case 129:
              if ((0x8000000080000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 128;
              }
              break;
            case 130:
              if ((0x10000000100000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 129;
              }
              break;
            case 131:
              if ((0x8000000080000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 130;
              }
              break;
            case 132:
              if ((0x20000000200000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 131;
              }
              break;
            case 133:
              if ((0x4000000040000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 132;
              }
              break;
            case 134:
              if ((0x400000004000L & l) != 0L) {
                jjAddStates(2, 6);
              }
              break;
            case 136:
              if ((0x1000000010000L & l) != 0L) {
                jjCheckNAdd(137);
              }
              break;
            case 138:
              if ((0x8000000080000L & l) != 0L) {
                jjCheckNAdd(136);
              }
              break;
            case 139:
              if ((0x10000000100L & l) != 0L) {
                jjCheckNAdd(136);
              }
              break;
            case 140:
              if ((0x8000000080000L & l) != 0L) {
                jjCheckNAdd(137);
              }
              break;
            case 142:
              if ((0x8000000080000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 141;
              }
              break;
            case 144:
              if ((0x10000000100L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 143;
              }
              break;
            case 145:
              if ((0x80000000800L & l) != 0L) {
                jjAddStates(0, 1);
              }
              break;
            case 147:
              if ((0x800000008000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 146;
              }
              break;
            case 148:
              if ((0x10000000100000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 147;
              }
              break;
            case 149:
              if ((0x8000000080000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 148;
              }
              break;
            case 150:
              if ((0x200000002000000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 149;
              }
              break;
            case 151:
              if ((0x2000000020L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 150;
              }
              break;
            case 153:
              if ((0x800000008000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 152;
              }
              break;
            case 154:
              if ((0x80000000800000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 153;
              }
              break;
            case 155:
              if ((0x8000000080000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 154;
              }
              break;
            case 156:
              if ((0x8000000080000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 155;
              }
              break;
            case 157:
              if ((0x200000002L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 156;
              }
              break;
            case 158:
              if ((0x1000000010000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 157;
              }
              break;
            case 159:
              if ((0x2000000020L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 158;
              }
              break;
            case 160:
              if ((0x4000000040000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 159;
              }
              break;
            case 161:
              if ((0x800000008000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 160;
              }
              break;
            case 162:
              if ((0x10000000100000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 161;
              }
              break;
            case 163:
              if ((0x8000000080000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 162;
              }
              break;
            case 164:
              if ((0x200000002000000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 163;
              }
              break;
            case 165:
              if ((0x2000000020L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 164;
              }
              break;
            default:
              break;
          }
        } while (i != startsAt);
      } else {
        int hiByte = (curChar >> 8);
        int i1 = hiByte >> 6;
        long l1 = 1L << (hiByte & 077);
        int i2 = (curChar & 0xff) >> 6;
        long l2 = 1L << (curChar & 077);
        do {
          switch (jjstateSet[--i]) {
            case 135:
            case 17:
              if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                break;
              }
              if (kind > 48) {
                kind = 48;
              }
            {
              jjCheckNAdd(17);
            }
            break;
            case 141:
              if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                break;
              }
              if (kind > 48) {
                kind = 48;
              }
            {
              jjCheckNAdd(17);
            }
            break;
            case 36:
              if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                break;
              }
              if (kind > 48) {
                kind = 48;
              }
            {
              jjCheckNAdd(17);
            }
            break;
            case 166:
              if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                break;
              }
              if (kind > 48) {
                kind = 48;
              }
            {
              jjCheckNAdd(17);
            }
            break;
            case 105:
              if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                break;
              }
              if (kind > 48) {
                kind = 48;
              }
            {
              jjCheckNAdd(17);
            }
            break;
            case 167:
              if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                break;
              }
              if (kind > 48) {
                kind = 48;
              }
            {
              jjCheckNAdd(17);
            }
            break;
            case 6:
              if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                if (kind > 47) {
                  kind = 47;
                }
              }
              if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                if (kind > 48) {
                  kind = 48;
                }
                {
                  jjCheckNAdd(17);
                }
              }
              break;
            case 143:
              if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                break;
              }
              if (kind > 48) {
                kind = 48;
              }
            {
              jjCheckNAdd(17);
            }
            break;
            case 90:
              if (!jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                break;
              }
              if (kind > 48) {
                kind = 48;
              }
            {
              jjCheckNAdd(17);
            }
            break;
            case 16:
              if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 47) {
                kind = 47;
              }
              break;
            case 20:
              if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                jjAddStates(18, 19);
              }
              break;
            default:
              if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) {
                break;
              } else {
                break;
              }
          }
        } while (i != startsAt);
      }
      if (kind != 0x7fffffff) {
        jjmatchedKind = kind;
        jjmatchedPos = curPos;
        kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 166 - (jjnewStateCnt = startsAt))) {
        return curPos;
      }
      try {
        curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
        return curPos;
      }
    }
  }

  static final int[] jjnextStates = {151, 165, 135, 138, 139, 142, 144, 109, 117, 133, 90, 98, 106, 53, 62, 79, 36, 45,
      20, 21,};

  private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
    switch (hiByte) {
      case 0:
        return ((jjbitVec0[i2] & l2) != 0L);
      default:
        return false;
    }
  }

  /** Token literal values. */
  public static final String[] jjstrLiteralImages = {"", null, null, null, null, "\12", null, null, null, null, null,
      null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
      null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
      null, "\72\57\57", null, null, null, "\72", "\75",};

  protected Token jjFillToken() {
    final Token t;
    final String curTokenImage;
    final int beginLine;
    final int endLine;
    final int beginColumn;
    final int endColumn;
    String im = jjstrLiteralImages[jjmatchedKind];
    curTokenImage = (im == null) ? input_stream.GetImage() : im;
    beginLine = input_stream.getBeginLine();
    beginColumn = input_stream.getBeginColumn();
    endLine = input_stream.getEndLine();
    endColumn = input_stream.getEndColumn();
    t = Token.newToken(jjmatchedKind, curTokenImage);

    t.beginLine = beginLine;
    t.endLine = endLine;
    t.beginColumn = beginColumn;
    t.endColumn = endColumn;

    return t;
  }

  int curLexState = 0;
  int defaultLexState = 0;
  int jjnewStateCnt;
  int jjround;
  int jjmatchedPos;
  int jjmatchedKind;

  /** Get the next Token. */
  public Token getNextToken() {
    Token matchedToken;
    int curPos = 0;

    EOFLoop:
    for (; ; ) {
      try {
        curChar = input_stream.BeginToken();
      } catch (java.io.IOException e) {
        jjmatchedKind = 0;
        jjmatchedPos = -1;
        matchedToken = jjFillToken();
        return matchedToken;
      }

      try {
        input_stream.backup(0);
        while (curChar <= 32 && (0x100003200L & (1L << curChar)) != 0L) {
          curChar = input_stream.BeginToken();
        }
      } catch (java.io.IOException e1) {
        continue EOFLoop;
      }
      jjmatchedKind = 0x7fffffff;
      jjmatchedPos = 0;
      curPos = jjMoveStringLiteralDfa0_0();
      if (jjmatchedKind != 0x7fffffff) {
        if (jjmatchedPos + 1 < curPos) {
          input_stream.backup(curPos - jjmatchedPos - 1);
        }
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
          matchedToken = jjFillToken();
          return matchedToken;
        } else {
          continue EOFLoop;
        }
      }
      int error_line = input_stream.getEndLine();
      int error_column = input_stream.getEndColumn();
      String error_after = null;
      boolean EOFSeen = false;
      try {
        input_stream.readChar();
        input_stream.backup(1);
      } catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
          error_line++;
          error_column = 0;
        } else {
          error_column++;
        }
      }
      if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
      }
      throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
          TokenMgrError.LEXICAL_ERROR);
    }
  }

  private void jjCheckNAdd(int state) {
    if (jjrounds[state] != jjround) {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
    }
  }

  private void jjAddStates(int start, int end) {
    do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
    } while (start++ != end);
  }

  private void jjCheckNAddTwoStates(int state1, int state2) {
    jjCheckNAdd(state1);
    jjCheckNAdd(state2);
  }

  /** Constructor. */
  public nInterfaceConfigParserTokenManager(JavaCharStream stream) {

    if (JavaCharStream.staticFlag) {
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
    }

    input_stream = stream;
  }

  /** Constructor. */
  public nInterfaceConfigParserTokenManager(JavaCharStream stream, int lexState) {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream) {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds() {
    int i;
    jjround = 0x80000001;
    for (i = 166; i-- > 0; ) {
      jjrounds[i] = 0x80000000;
    }
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState) {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState) {
    if (lexState >= 1 || lexState < 0) {
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
          TokenMgrError.INVALID_LEXICAL_STATE);
    } else {
      curLexState = lexState;
    }
  }

  /** Lexer state names. */
  public static final String[] lexStateNames = {"DEFAULT",};
  static final long[] jjtoToken = {0xd7bffc614847e1L,};
  static final long[] jjtoSkip = {0x1eL,};
  protected JavaCharStream input_stream;

  private final int[] jjrounds = new int[166];
  private final int[] jjstateSet = new int[2 * 166];


  protected char curChar;
}
