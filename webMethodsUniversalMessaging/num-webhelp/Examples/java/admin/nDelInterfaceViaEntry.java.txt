/*
 *
 *   Copyright (c) 1999 - 2011 my-Channels Ltd
 *   Copyright (c) 2012 - 2022 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.
 *
 *   Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG.
 *
 */
package com.pcbsys.nirvana.nAdminAPI.apps;

import com.pcbsys.nirvana.apps.nSampleApp;
import com.pcbsys.nirvana.client.nSessionAttributes;
import com.pcbsys.nirvana.nAdminAPI.nACL;
import com.pcbsys.nirvana.nAdminAPI.nInterface;
import com.pcbsys.nirvana.nAdminAPI.nInterfaceManager;
import com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus;
import com.pcbsys.nirvana.nAdminAPI.nInterfaceViaEntry;
import com.pcbsys.nirvana.nAdminAPI.nRealmNode;
import java.util.Enumeration;


/**
 * This application can be used to remove a subject from an Interface VIA list.
 */
public class nDelInterfaceViaEntry extends nSampleApp {

  /**
   * Private variables used in this application
   */
  private String realm = null;
  private String name = null;
  private String host = null;
  private boolean recursive = false;
  private nSessionAttributes attr = null;
  private String interfaceName = null;
  private nRealmNode node = null;
  private nACL acl = null;

  /**
   * Consruct and instance of this class using the command line arguments passed
   * when it is executed.
   */
  public nDelInterfaceViaEntry(String[] args) {
    //Process command line arguments
    processArgs(args);
    try {
      System.out.println("Connecting to " + realm);
      // construct the session attributes from the realm
      attr = new nSessionAttributes(realm);
      // get the root realm node from the realm admin
      node = new nRealmNode(attr);
      if (!node.isAuthorised()) {
        System.out.println("User not authorised on this node " + realm);
        return;
      }

      // wait for the entire node namespace to be constructed if
      // the operation is recursive
      if (recursive) {
        System.out.print("waiting for namepsace construction..... ");
        node.waitForEntireNameSpace();
        System.out.println("finished");
      }

      nInterface iface = getInterface();
      if (iface != null) {
        acl = iface.getViaList();
        dumpViaEntries(iface);
        setAcl(iface);
      }

      node.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  /**
   * Remove the Interface VIA entry
   */
  public void setAcl(nInterface p_iface) {
    try {
      nInterfaceViaEntry newEntry = new nInterfaceViaEntry(name, host);

      // add the new entry to the acl
      acl.remove(newEntry);
      // set the interface VIA list to the new acl list
      p_iface.setViaList(acl);
      System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
      System.out.println("Removed VIA Entry for " + p_iface.getName() + " in realm " + node.getName());
      System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
      dump(newEntry);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  /**
   * find the interface specified
   */
  private nInterface getInterface() {
    try {
      nInterfaceManager mgr = node.getInterfaceManager();
      nInterfaceStatus status = mgr.findInterface(interfaceName);
      if (status != null) {
        return status.getInterface();
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return null;
  }

  /**
   * If you construct an instance of this class from another class, you can set the name
   * and host for the subject.
   */
  public void setSubject(String p_name, String p_host) {
    name = p_name;
    host = p_host;
  }

  /**
   * Output to system.out the permissions that have been set
   */
  public void dump(nInterfaceViaEntry entry) {
    System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
    System.out.println(entry.getSubject());
    System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
  }

  /**
   * Simply print the VIA list for the chosen interface
   *
   * @param iface the interface to print entries for
   */
  protected void dumpViaEntries(nInterface iface) {
    Enumeration entries = acl.getEntries();
    System.out.println("~~~~Starting VIA List for Interface : " + iface.getName() + "~~~~");
    while (entries.hasMoreElements()) {
      nInterfaceViaEntry entry = (nInterfaceViaEntry) entries.nextElement();
      dump(entry);
    }
  }

  /**
   * Set the program variables and permissions flags based on command line args
   */
  public void getOptions(String[] args) {
    realm = System.getProperty("RNAME", null);
    if (realm == null) {
      Usage();
      System.exit(1);
    }

    name = System.getProperty("NAME", null);
    if (name == null) {
      Usage();
      System.exit(1);
    }

    host = System.getProperty("HOST", null);
    if (host == null) {
      Usage();
      System.exit(1);
    }

    interfaceName = System.getProperty("IFACE", null);
    if (interfaceName == null) {
      Usage();
      System.exit(1);
    }
  }

  protected void processArgs(String[] args) {
    switch (args.length) {
      case 1:
        if (args[0].equals("-?")) {
          UsageEnv();
        }

        System.setProperty("IFACE", args[0]);
        getOptions(null);
        break;
      case 2:
        System.setProperty("IFACE", args[0]);
        System.setProperty("NAME", args[1]);
        getOptions(null);
        break;
      default:
        System.setProperty("IFACE", args[0]);
        System.setProperty("NAME", args[1]);
        System.setProperty("HOST", args[2]);
        getOptions(args);
    }
  }

  /**
   * Run this as a command line program passing the command line args.
   * Or construct one of these classes from another class ensuring you have added :
   * RNAME
   * NAME
   * HOST
   * IFACE
   * as system properties, and pass in a list of permissions in the constructor
   */
  public static void main(String[] args) {
    processEnvironmentVariables();

    nDelInterfaceViaEntry viaDel = new nDelInterfaceViaEntry(args);
    System.exit(0);
  }

  /**
   * Prints the usage message for this class
   */
  private static void Usage() {
    System.out.println("Usage ...\n");
    System.out.println("naddchanacl <iface name> <user> <host> \n");
    System.out.println("<Required Arguments> \n");
    System.out.println("<channel name> - Channel name parameter for the channel to add the ACL entry to");
    System.out.println("<user> - User name parameter for the channel to add the ACL entry to");
    System.out.println("<host> - Host name parameter for the channel to add the ACL entry to");
    System.out.println("\n\nNote: -? provides help on environment variables \n");
  }
}
