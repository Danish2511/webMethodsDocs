/*
 *
 *   Copyright (c) 1999 - 2011 my-Channels Ltd
 *   Copyright (c) 2012 - 2022 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.
 *
 *   Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG.
 *
 */
package com.pcbsys.nirvana.nAdminAPI.apps;

import com.pcbsys.nirvana.apps.nSampleApp;
import com.pcbsys.nirvana.client.nSessionAttributes;
import com.pcbsys.nirvana.nAdminAPI.nACLEntry;
import com.pcbsys.nirvana.nAdminAPI.nContainer;
import com.pcbsys.nirvana.nAdminAPI.nLeafNode;
import com.pcbsys.nirvana.nAdminAPI.nRealmNode;
import java.util.Enumeration;

/**
 * This application can be used to remove a subject from a queue acl
 */

public class nDelQueueAclEntry extends nSampleApp {

  /**
   * Private variables used in this application
   */
  private String realm = null;
  private String name = null;
  private String host = null;
  private String queueName = null;
  private nSessionAttributes attr = null;
  private nRealmNode node = null;

  /**
   * Construct an instance of this class using the command line arguments passed
   * when it is executed.
   */
  public nDelQueueAclEntry(String args[]) {
    try {
      // set the parameters required for this operation
      processArgs(args);
      System.out.println("Connecting to " + realm);
      // construct the session attributes from the realm
      attr = new nSessionAttributes(realm);
      // get the root realm node from the realm admin
      node = new nRealmNode(attr);
      if (!node.isAuthorised()) {
        System.out.println("User not authorised on this node " + realm);
        return;
      }

      // wait for the entire node namespace to be constructed
      node.waitForEntireNameSpace();
      // call the method to begin searching the root node
      searchNode(node);
      node.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  /**
   * remove the subject from the queue node
   */
  public void removeSubject(nRealmNode p_node, nLeafNode p_leaf) {
    try {
      // get the acl for the queue node
      System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
      System.out.println(
          "Removing ACL entry for queue " + p_leaf.getAttributes().getName() + " on realm " + p_node.getName());
      System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
      System.out.println("Removing entry for " + name + "@" + host);
      // create a new acl entry with the name and host
      p_leaf.removeACLEntry(new nACLEntry(name + "@" + host));
      dump();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  /**
   * search the enumeration of chil nodes for other realms and queues
   */
  private void searchNodes(nRealmNode p_node, Enumeration enum1) {
    while (enum1.hasMoreElements()) {
      Object obj = enum1.nextElement();
      if (obj instanceof nLeafNode) {
        nLeafNode leaf = (nLeafNode) obj;
        String fullyQualifiedName = leaf.getAbsolutePath();
        System.out.println("Found queue " + fullyQualifiedName);
        if ((!leaf.isChannel()) && (fullyQualifiedName.equals(queueName))) {
          // we have found a queue that matches the name specified, so remove the subject
          removeSubject(p_node, leaf);
        }
      } else if (obj instanceof nRealmNode) {
        // we have found a realm, so search the realm node for existence of the queue
        // that has the acl entry
        searchNode((nRealmNode) obj);
      } else if (obj instanceof nContainer) {
        nContainer cont = (nContainer) obj;
        searchNodes(p_node, cont.getNodes());
      }
    }
  }

  /**
   * Search the children of the realm passed as a paremeter
   */
  private void searchNode(nRealmNode p_node) {
    try {
      searchNodes(p_node, p_node.getNodes());
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }

  /**
   * If you construct an instance of this class from another class, you can set the name
   * and host for the subject to remove.
   */
  public void setSubject(String p_name, String p_host) {
    name = p_name;
    host = p_host;
  }

  /**
   * Output to system.out the permissions that have been set
   */
  public void dump() {
    System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
    System.out.println("NAME                   : " + name);
    System.out.println("HOST                   : " + host);
    System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
  }

  /**
   * Set the program variables and flags based on command line args
   */
  public void getOptions(String args[]) {
    realm = System.getProperty("RNAME", null);
    if (realm == null) {
      Usage();
      System.exit(1);
    }
    name = System.getProperty("NAME", null);
    if (name == null) {
      Usage();
      System.exit(1);
    }
    host = System.getProperty("HOST", null);
    if (host == null) {
      Usage();
      System.exit(1);
    }
    queueName = System.getProperty("QUEUE", null);
    if (queueName == null) {
      Usage();
      System.exit(1);
    }
  }

  protected void processArgs(String[] args) {
    if (args.length == 0) {
      Usage();
      System.exit(1);
    }
    switch (args.length) {
      case 1:
        if (args[0].equals("-?")) {
          UsageEnv();
        }
        System.setProperty("QUEUE", args[0]);
        getOptions(null);
        break;
      case 2:
        System.setProperty("QUEUE", args[0]);
        System.setProperty("NAME", args[1]);
        getOptions(null);
        break;
      default:
        System.setProperty("QUEUE", args[0]);
        System.setProperty("NAME", args[1]);
        System.setProperty("HOST", args[2]);
        getOptions(args);
    }
  }

  /**
   * Run this as a command line program passing the command line args.
   * Or construct one of these classes from another class ensuring you have added :
   * RNAME
   * NAME
   * HOST
   * QUEUE
   * as system properties
   */
  public static void main(String[] args) {
    processEnvironmentVariables();

    nDelQueueAclEntry setAcl = new nDelQueueAclEntry(args);
    System.exit(0);
  }

  /**
   * Prints the usage message for this class
   */
  private static void Usage() {

    System.out.println("Usage ...\n");
    System.out.println("ndelqueueacl <queue name> <user> <host> \n");
    System.out.println("<Required Arguments> \n");
    System.out.println("<queue name> - Queue name parameter for the queue to delete the ACL entry from");
    System.out.println("<user> - User name parameter for the queue to delete the ACL entry from");
    System.out.println("<host> - Host name parameter for the queue to delete the ACL entry from");
    System.out.println("\n[Optional Arguments] \n");
    System.out.println("\n\nNote: -? provides help on environment variables \n");
  }
}
