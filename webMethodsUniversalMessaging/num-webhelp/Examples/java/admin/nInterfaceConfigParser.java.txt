/*
 *
 *   Copyright (c) 1999 - 2011 my-Channels Ltd
 *   Copyright (c) 2012 - 2022 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.
 *
 *   Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG.
 *
 */

/* nInterfaceConfigParser.java */
/* Generated By:JavaCC: Do not edit this line. nInterfaceConfigParser.java */
package com.pcbsys.nirvana.nAdminAPI.apps;

import com.pcbsys.nirvana.nAdminAPI.nBaseAdminException;
import com.pcbsys.nirvana.nAdminAPI.nHTTPInterface;
import com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface;
import com.pcbsys.nirvana.nAdminAPI.nInterface;
import com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus;
import com.pcbsys.nirvana.nAdminAPI.nSSLInterface;
import com.pcbsys.nirvana.nAdminAPI.nSocketInterface;
import java.io.BufferedReader;
import java.util.Hashtable;

public class nInterfaceConfigParser implements nInterfaceConfigParserConstants {

  private String myProtocolId;
  private nInterfaceStatus myInterfaceStatus;
  private nInterfaceConfig myInConfig;
  private nInterface myNewInterface;
  private Hashtable myFields;

  public nInterfaceConfigParser(String command, nInterfaceConfig interfaceConfig) {
    this(new BufferedReader(new java.io.StringReader(command)));
    myInConfig = interfaceConfig;
    myFields = new Hashtable();
    myNewInterface = null;
    myInterfaceStatus = null;
    myProtocolId = "";
    try {
      one_line();
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }


  public nInterfaceConfigParser(nInterfaceConfig interfaceConfig) {
    this(System.in);
    myInConfig = interfaceConfig;
    myFields = new Hashtable();
    myNewInterface = null;
    myInterfaceStatus = null;
    myProtocolId = "";
    while (true) {
      System.out.print("Command: ");
      System.out.flush();

      myFields = new Hashtable();
      myNewInterface = null;
      myInterfaceStatus = null;
      myProtocolId = "";

      try {
        switch (one_line()) {
          case -1:
            System.exit(0);
          case 1:
            System.out.println("Command: ");
            System.out.flush();
            break;
          default:
            break;
        }
      } catch (ParseException x) {
        System.out.println("Exiting.");
        x.printStackTrace();
        System.exit(0);
      }
    }
  }


  protected nInterfaceStatus findStatus(String protocolId) {
    try {
      return myInConfig.findInterface(protocolId);
    } catch (Exception ex) {
      ex.printStackTrace();
    }
    return null;
  }

  final public int one_line() throws ParseException {
    switch (jj_nt.kind) {
      case ADD: {
        add();
        jj_consume_token(EOL);
        {
          if ("" != null) {
            return 1;
          }
        }
        break;
      }
      case DEL: {
        del();
        jj_consume_token(EOL);
        {
          if ("" != null) {
            return 1;
          }
        }
        break;
      }
      case MOD: {
        mod();
        jj_consume_token(EOL);
        {
          if ("" != null) {
            return 1;
          }
        }
        break;
      }
      case STOP: {
        stop();
        jj_consume_token(EOL);
        {
          if ("" != null) {
            return 1;
          }
        }
        break;
      }
      case START: {
        start();
        jj_consume_token(EOL);
        {
          if ("" != null) {
            return 1;
          }
        }
        break;
      }
      case LIST: {
        list();
        jj_consume_token(EOL);
        {
          if ("" != null) {
            return 1;
          }
        }
        break;
      }
      case MONITOR: {
        monitor();
        jj_consume_token(EOL);
        {
          if ("" != null) {
            return 1;
          }
        }
        break;
      }
      case LISTALL: {
        listall();
        jj_consume_token(EOL);
        {
          if ("" != null) {
            return 1;
          }
        }
        break;
      }
      case HELP: {
        jj_consume_token(HELP);
        jj_consume_token(EOL);
        myInConfig.Usage();
        {
          if ("" != null) {
            return 0;
          }
        }
        break;
      }
      case EOL: {
        jj_consume_token(EOL);
        {
          if ("" != null) {
            return 0;
          }
        }
        break;
      }
      case 0: {
        jj_consume_token(0);
        {
          if ("" != null) {
            return -1;
          }
        }
        break;
      }
      case EXIT: {
        jj_consume_token(EXIT);
        {
          if ("" != null) {
            return -1;
          }
        }
        break;
      }
      default:
        jj_consume_token(-1);
        throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void inter() throws ParseException {
    Token op;
    op = jj_consume_token(INTERFACE_IDENTIFIER);
    myProtocolId = op.toString();
    myInterfaceStatus = findStatus(op.toString());
  }

  final public void add() throws ParseException {
    jj_consume_token(ADD);
    url();
    if (myNewInterface != null) {
      try {
        System.out.println("Adding interface " + myNewInterface.getURL());
        myInConfig.addInterface(myNewInterface, myFields);
        System.out.println("Added interface " + myNewInterface.getURL());
      } catch (Exception ex) {
        System.out.println("Add failed due to " + ex.getMessage());
      }
    }
    myNewInterface = null;
  }

  final public void inter_mod() throws ParseException {
    Token op;
    op = jj_consume_token(INTERFACE_IDENTIFIER);
    label_1:
    while (true) {
      switch (jj_nt.kind) {
        case INTERFACE_OPTIONS:
        case INTERFACE_BOOLEAN_OPTIONS:
        case HTTP_OPTIONS:
        case SSL_OPTIONS:
        case SSL_BOOLEAN_OPTIONS:
        case SSL_PHRASE_OPTIONS: {
          ;
          break;
        }
        default:
          break label_1;
      }
      switch (jj_nt.kind) {
        case SSL_BOOLEAN_OPTIONS: {
          ssl_boolean_options();
          break;
        }
        case SSL_PHRASE_OPTIONS: {
          ssl_phrase_options();
          break;
        }
        case SSL_OPTIONS: {
          ssl_options();
          break;
        }
        case INTERFACE_OPTIONS: {
          interface_options();
          break;
        }
        case HTTP_OPTIONS: {
          http_options();
          break;
        }
        case INTERFACE_BOOLEAN_OPTIONS: {
          interface_boolean_options();
          break;
        }
        default:
          jj_consume_token(-1);
          throw new ParseException();
      }
    }
    myProtocolId = op.toString();
    myInterfaceStatus = findStatus(op.toString());
  }

  final public void url() throws ParseException {
    Token adapter = null;
    Token port = null;
    switch (jj_nt.kind) {
      case NSP: {
        jj_consume_token(NSP);
        jj_consume_token(HOSTURL_DELIMITER);
        adapter = jj_consume_token(STRING);
        jj_consume_token(54);
        port = jj_consume_token(NUMBER);
        label_2:
        while (true) {
          switch (jj_nt.kind) {
            case INTERFACE_OPTIONS:
            case INTERFACE_BOOLEAN_OPTIONS: {
              ;
              break;
            }
            default:
              break label_2;
          }
          switch (jj_nt.kind) {
            case INTERFACE_OPTIONS: {
              interface_options();
              break;
            }
            case INTERFACE_BOOLEAN_OPTIONS: {
              interface_boolean_options();
              break;
            }
            default:
              jj_consume_token(-1);
              throw new ParseException();
          }
        }
        System.out.println("Add NSP");
        try {
          myNewInterface = new nSocketInterface(adapter.toString(), Integer.parseInt(port.toString()));
        } catch (nBaseAdminException ex) {
          ex.printStackTrace();
        }
        break;
      }
      case NSPS: {
        jj_consume_token(NSPS);
        jj_consume_token(HOSTURL_DELIMITER);
        adapter = jj_consume_token(STRING);
        jj_consume_token(54);
        port = jj_consume_token(NUMBER);
        label_3:
        while (true) {
          switch (jj_nt.kind) {
            case INTERFACE_OPTIONS:
            case INTERFACE_BOOLEAN_OPTIONS:
            case SSL_OPTIONS:
            case SSL_BOOLEAN_OPTIONS:
            case SSL_PHRASE_OPTIONS: {
              ;
              break;
            }
            default:
              break label_3;
          }
          switch (jj_nt.kind) {
            case SSL_BOOLEAN_OPTIONS: {
              ssl_boolean_options();
              break;
            }
            case SSL_PHRASE_OPTIONS: {
              ssl_phrase_options();
              break;
            }
            case SSL_OPTIONS: {
              ssl_options();
              break;
            }
            case INTERFACE_OPTIONS: {
              interface_options();
              break;
            }
            case INTERFACE_BOOLEAN_OPTIONS: {
              interface_boolean_options();
              break;
            }
            default:
              jj_consume_token(-1);
              throw new ParseException();
          }
        }
        System.out.println("Add NSPS");
        try {
          myNewInterface = new nSSLInterface(adapter.toString(), Integer.parseInt(port.toString()));
        } catch (nBaseAdminException ex) {
          ex.printStackTrace();
        }
        break;
      }
      case NHP: {
        jj_consume_token(NHP);
        jj_consume_token(HOSTURL_DELIMITER);
        adapter = jj_consume_token(STRING);
        jj_consume_token(54);
        port = jj_consume_token(NUMBER);
        label_4:
        while (true) {
          switch (jj_nt.kind) {
            case INTERFACE_OPTIONS:
            case INTERFACE_BOOLEAN_OPTIONS:
            case HTTP_OPTIONS: {
              ;
              break;
            }
            default:
              break label_4;
          }
          switch (jj_nt.kind) {
            case INTERFACE_OPTIONS: {
              interface_options();
              break;
            }
            case HTTP_OPTIONS: {
              http_options();
              break;
            }
            case INTERFACE_BOOLEAN_OPTIONS: {
              interface_boolean_options();
              break;
            }
            default:
              jj_consume_token(-1);
              throw new ParseException();
          }
        }
        System.out.println("Add NHP");
        try {
          myNewInterface = new nHTTPInterface(adapter.toString(), Integer.parseInt(port.toString()));
        } catch (nBaseAdminException ex) {
          ex.printStackTrace();
        }
        break;
      }
      case NHPS: {
        jj_consume_token(NHPS);
        jj_consume_token(HOSTURL_DELIMITER);
        adapter = jj_consume_token(STRING);
        jj_consume_token(54);
        port = jj_consume_token(NUMBER);
        label_5:
        while (true) {
          switch (jj_nt.kind) {
            case INTERFACE_OPTIONS:
            case INTERFACE_BOOLEAN_OPTIONS:
            case HTTP_OPTIONS:
            case SSL_OPTIONS:
            case SSL_BOOLEAN_OPTIONS:
            case SSL_PHRASE_OPTIONS: {
              ;
              break;
            }
            default:
              break label_5;
          }
          switch (jj_nt.kind) {
            case SSL_BOOLEAN_OPTIONS: {
              ssl_boolean_options();
              break;
            }
            case SSL_PHRASE_OPTIONS: {
              ssl_phrase_options();
              break;
            }
            case SSL_OPTIONS: {
              ssl_options();
              break;
            }
            case INTERFACE_OPTIONS: {
              interface_options();
              break;
            }
            case HTTP_OPTIONS: {
              http_options();
              break;
            }
            case INTERFACE_BOOLEAN_OPTIONS: {
              interface_boolean_options();
              break;
            }
            default:
              jj_consume_token(-1);
              throw new ParseException();
          }
        }
        System.out.println("Add NHPS");
        try {
          myNewInterface = new nHTTPSInterface(adapter.toString(), Integer.parseInt(port.toString()));
        } catch (nBaseAdminException ex) {
          ex.printStackTrace();
        }
        break;
      }
      default:
        jj_consume_token(-1);
        throw new ParseException();
    }
  }

  final public void del() throws ParseException {
    jj_consume_token(DEL);
    inter();
    if (myInterfaceStatus != null) {
      try {
        System.out.println("Deleting interface " + myInterfaceStatus.getInterface().getName());
        myInConfig.delInterface(myInterfaceStatus.getInterface());
        System.out.println("Deleted interface " + myInterfaceStatus.getInterface().getName());
      } catch (Exception ex) {
        System.out.println("Delete failed due to " + ex.getMessage());
      }
    }
  }

  final public void mod() throws ParseException {
    jj_consume_token(MOD);
    inter_mod();
    if (myInterfaceStatus != null) {
      System.out.println("Modifying interface " + myInterfaceStatus.getInterface().getName());
      try {
        myInConfig.modInterface(myInterfaceStatus.getInterface(), myFields);
      } catch (Exception ex) {
        System.out.println("Modify failed due to " + ex.getMessage());
      }
    }
  }

  final public void stop() throws ParseException {
    jj_consume_token(STOP);
    inter();
    if (myInterfaceStatus != null) {
      try {
        System.out.println("Stopping interface " + myInterfaceStatus.getInterface().getName());
        myInConfig.stopInterface(myInterfaceStatus.getInterface());
        System.out.println("Stopped interface " + myInterfaceStatus.getInterface().getName());
      } catch (Exception ex) {
        System.out.println("Stop failed due to " + ex.getMessage());
      }
    }
  }

  final public void start() throws ParseException {
    jj_consume_token(START);
    inter();
    if (myInterfaceStatus != null) {
      try {
        System.out.println("Starting interface " + myInterfaceStatus.getInterface().getName());
        myInConfig.startInterface(myInterfaceStatus.getInterface());
        System.out.println("Started interface " + myInterfaceStatus.getInterface().getName());
      } catch (Exception ex) {
        System.out.println("Start failed due to " + ex.getMessage());
      }
    }
  }

  final public void monitor() throws ParseException {
    jj_consume_token(MONITOR);
    switch (jj_nt.kind) {
      case INTERFACE_IDENTIFIER: {
        inter();
        break;
      }
      default:
        ;
    }
    if (myInterfaceStatus != null) {
      myInConfig.monitorInterface(myInterfaceStatus);
    } else {
      myInConfig.monitorAll();
    }
  }

  final public void list() throws ParseException {
    jj_consume_token(LIST);
    switch (jj_nt.kind) {
      case INTERFACE_IDENTIFIER: {
        inter();
        break;
      }
      default:
        ;
    }
    if (myInterfaceStatus != null) {
      myInConfig.displayInterface(myInterfaceStatus, false);
    } else {
      myInConfig.displayAll(false);
    }
  }

  final public void listall() throws ParseException {
    jj_consume_token(LISTALL);
    switch (jj_nt.kind) {
      case INTERFACE_IDENTIFIER: {
        inter();
        break;
      }
      default:
        ;
    }
    if (myInterfaceStatus != null) {
      myInConfig.displayInterface(myInterfaceStatus, true);
    } else {
      myInConfig.displayAll(true);
    }
  }

  final public void interface_options() throws ParseException {
    Token optionName;
    Token optionValue;
    optionName = jj_consume_token(INTERFACE_OPTIONS);
    jj_consume_token(55);
    optionValue = jj_consume_token(NUMBER);
    myFields.put(optionName.toString(), optionValue.toString());
  }

  final public void interface_boolean_options() throws ParseException {
    Token optionName;
    Token optionValue;
    optionName = jj_consume_token(INTERFACE_BOOLEAN_OPTIONS);
    jj_consume_token(55);
    optionValue = jj_consume_token(BOOLEAN);
    myFields.put(optionName.toString(), optionValue.toString());
  }

  final public void http_options() throws ParseException {
    Token optionName;
    Token optionValue;
    optionName = jj_consume_token(HTTP_OPTIONS);
    jj_consume_token(55);
    optionValue = jj_consume_token(STRING);
    myFields.put(optionName.toString(), optionValue.toString());
  }

  final public void ssl_options() throws ParseException {
    Token optionName;
    Token optionValue;
    optionName = jj_consume_token(SSL_OPTIONS);
    jj_consume_token(55);
    optionValue = jj_consume_token(STRING);
    myFields.put(optionName.toString(), optionValue.toString());
  }

  final public void ssl_boolean_options() throws ParseException {
    Token optionName;
    Token optionValue;
    optionName = jj_consume_token(SSL_BOOLEAN_OPTIONS);
    jj_consume_token(55);
    optionValue = jj_consume_token(BOOLEAN);
    myFields.put(optionName.toString(), optionValue.toString());
  }

  final public void ssl_phrase_options() throws ParseException {
    Token optionName;
    Token optionValue;
    optionName = jj_consume_token(SSL_PHRASE_OPTIONS);
    jj_consume_token(55);
    optionValue = jj_consume_token(PHRASE);
    myFields.put(optionName.toString(), optionValue.toString());
  }

  /** Generated Token Manager. */
  public nInterfaceConfigParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;

  /** Constructor with InputStream. */
  public nInterfaceConfigParser(java.io.InputStream stream) {
    this(stream, null);
  }

  /** Constructor with InputStream and supplied encoding */
  public nInterfaceConfigParser(java.io.InputStream stream, String encoding) {
    try {
      jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    token_source = new nInterfaceConfigParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
    ReInit(stream, null);
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try {
      jj_input_stream.ReInit(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  /** Constructor. */
  public nInterfaceConfigParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new nInterfaceConfigParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  /** Constructor with generated Token Manager. */
  public nInterfaceConfigParser(nInterfaceConfigParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  /** Reinitialise. */
  public void ReInit(nInterfaceConfigParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) {
      jj_nt = jj_nt.next;
    } else {
      jj_nt = jj_nt.next = token_source.getNextToken();
    }
    if (token.kind == kind) {
      return token;
    }
    jj_nt = token;
    token = oldToken;
    throw generateParseException();
  }


  /** Get the next Token. */
  final public Token getNextToken() {
    if ((token = jj_nt).next != null) {
      jj_nt = jj_nt.next;
    } else {
      jj_nt = jj_nt.next = token_source.getNextToken();
    }
    return token;
  }

  /** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) {
        t = t.next;
      } else {
        t = t.next = token_source.getNextToken();
      }
    }
    return t;
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
