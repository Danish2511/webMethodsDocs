/*
 *
 *   Copyright (c) 1999 - 2011 my-Channels Ltd
 *   Copyright (c) 2012 - 2022 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.
 *
 *   Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG.
 *
 */
package com.pcbsys.nirvana.apps;

import com.pcbsys.nirvana.client.nIllegalArgumentException;
import com.pcbsys.nirvana.client.nRealm;
import com.pcbsys.nirvana.client.nRealmInUseException;
import com.pcbsys.nirvana.client.nRealmNotFoundException;
import com.pcbsys.nirvana.client.nRealmUnreachableException;
import com.pcbsys.nirvana.client.nRequestTimedOutException;
import com.pcbsys.nirvana.client.nSecurityException;
import com.pcbsys.nirvana.client.nSessionFactory;
import com.pcbsys.nirvana.client.nSessionNotConnectedException;
import com.pcbsys.nirvana.client.nSessionPausedException;
import com.pcbsys.nirvana.client.nUnexpectedResponseException;

/**
 * Deletes an already added remote realm from the local one
 */
public class deleteRealm extends nSampleApp {

  private static deleteRealm mySelf = null;

  /**
   * This method demonstrates the Nirvana API calls necessary to delete a realm
   * It is called after all command line arguments have been received and
   * validated
   *
   * @param realmDetails a String[] containing the possible RNAME values
   * @param arealm the nRealm object to be deleted from the current realm
   */
  private void doit(String[] realmDetails, nRealm arealm) {

    mySelf.constructSession(realmDetails);

    //Deletes the remote realm object from the local realm. The object contains all the
    //necessary information for the 2 realms to start communicating.
    try {
      mySession.deleteRealm(arealm);
    }
    //Handle errors
    catch (nSessionPausedException ex1) {
    } catch (nIllegalArgumentException ex) {
    } catch (nRealmUnreachableException nue) {
      System.out.println("The REALM specified could not be found.");
      System.out.println("Please ensure that the REALM is running.");
      nue.printStackTrace();
      System.exit(1);
    } catch (nRealmInUseException riu) {
      System.out.println("The REALM specified is currentl;y configured in a join / cluster.");
      riu.printStackTrace();
      System.exit(1);
    } catch (nRealmNotFoundException rnfe) {
      System.out.println("The REALM specified could not be found.");
      System.out.println("Please ensure that the REALM is currently added.");
      rnfe.printStackTrace();
      System.exit(1);
    } catch (nSecurityException se) {
      System.out.println("Insufficient permissions for the requested operation.");
      System.out.println("Please check the ACL settings on the server.");
      se.printStackTrace();
      System.exit(1);
    } catch (nSessionNotConnectedException snce) {
      System.out.println("The session object used is not physically connected to the Nirvana realm.");
      System.out.println("Please ensure the realm is up and check your RNAME value.");
      snce.printStackTrace();
      System.exit(1);
    } catch (nUnexpectedResponseException ure) {
      System.out.println("The Nirvana REALM has returned an unexpected response.");
      System.out.println("Please ensure the Nirvana REALM and client API used are compatible.");
      ure.printStackTrace();
      System.exit(1);
    } catch (nRequestTimedOutException rtoe) {
      System.out.println("The requested operation has timed out waiting for a response from the REALM.");
      System.out.println("If this is a very busy REALM ask your administrator to increase the client timeout values.");
      rtoe.printStackTrace();
      System.exit(1);
    }
    //Close the session we opened
    try {
      nSessionFactory.close(mySession);
    } catch (Exception ex) {
    }
    //Close any other sessions within this JVM so that we can exit
    nSessionFactory.shutdown();

  }

  protected void processArgs(String[] args) {
    switch (args.length) {
      case 1:
        if (args[0].equals("-?")) {
          Usage();
          UsageEnv();
        }
        System.getProperties().put("REALMNAME", args[0]);
        break;
    }
  }


  public static void main(String[] args) {

    //Create an instance for this class
    mySelf = new deleteRealm();

    //Process command line arguments
    mySelf.processArgs(args);

    //Process Environment Variables
    nSampleApp.processEnvironmentVariables();

    //Check the remote realm name specified
    String realmName = null;
    if (System.getProperty("REALMNAME") != null) {
      realmName = System.getProperty("REALMNAME");
    } else {
      Usage();
      System.exit(1);
    }

    //Check the local realm details
    int idx = 0;
    String RNAME = null;
    if (System.getProperty("RNAME") != null) {
      RNAME = System.getProperty("RNAME");
    } else {
      Usage();
      System.exit(1);
    }

    //Process the local REALM RNAME details
    String[] rproperties = new String[4];
    rproperties = parseRealmProperties(RNAME);

    //Create an instance of the Nirvana Realm object to be deleted from the local one
    try {
      nRealm nr = new nRealm();
      //Set the name of the realm to be deleted
      nr.setName(realmName);
      //delete the remote realm from the local one
      mySelf.doit(rproperties, nr);
    } catch (Exception ex) {
      ex.printStackTrace();
    }
  }

  /**
   * Prints the usage string for this class
   */
  private static void Usage() {

    System.out.println("Usage ...\n");
    System.out.println("ndelrealm <realm name>  \n");

    System.out.println("<Required Arguments> \n");
    System.out.println("<realm name> - Realm name parameter for the realm to delete from the namespace");

    System.out.println("\n\nNote: -? provides help on environment variables \n");
  }

} // End of deleteRealm Class

