/*
 *
 *   Copyright (c) 1999 - 2011 my-Channels Ltd
 *   Copyright (c) 2012 - 2022 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.
 *
 *   Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG.
 *
 */

package com.pcbsys.nirvana.apps;

import com.pcbsys.nirvana.base.nConstants;
import com.pcbsys.nirvana.client.nChannelAlreadyExistsException;
import com.pcbsys.nirvana.client.nChannelAttributes;
import com.pcbsys.nirvana.client.nConsumeEvent;
import com.pcbsys.nirvana.client.nEventListener;
import com.pcbsys.nirvana.client.nEventProperties;
import com.pcbsys.nirvana.client.nQueue;
import com.pcbsys.nirvana.client.nQueueReaderContext;
import com.pcbsys.nirvana.client.nSessionAttributes;
import com.pcbsys.nirvana.client.nSessionFactory;
import java.util.Random;

/**
 * This app sends 20 messages of differing levels of priority and demonstrates
 * how a block in the consumer will result in the prioritization of messages on the client buffer
 */
public class PriorityQueue extends nSampleApp {

  String RNAME;
  nQueue queue;

  public PriorityQueue(String rnameStr) {
    RNAME = rnameStr;

    if (RNAME == null) {
      throw new RuntimeException("Please supply the RNAME of the Realm you wish to connect to.");
    }
  }

  private void createSession() throws Exception {
    nsa = new nSessionAttributes(RNAME);
    mySession = nSessionFactory.create(nsa);
    mySession.init();
  }

  private void createQueue() throws Exception {
    //Prioritized queues are created by default
    nChannelAttributes channelAttributes = new nChannelAttributes("PrioritizedQueue");
    channelAttributes.setType(nConstants.CHAN_PERSISTENT);

    try {
      queue = mySession.createQueue(channelAttributes);
    } catch (nChannelAlreadyExistsException e) {
      queue = mySession.findQueue(channelAttributes);
    }
  }

  private void setupConsumer() throws Exception {
    nQueueReaderContext reader = new nQueueReaderContext(new nEventListener() {
      @Override
      public void go(nConsumeEvent evt) {

        //This IF statement is entered when the initial message is sent
        // (as the default priority on messages is 15 when no priority is set)
        if (evt.getAttributes().getPriority() == 15) {
          try {
            sendMessages();
            blockConsumer();
            return;
          } catch (Exception e) {

          }
        }

        int i = evt.getAttributes().getPriority();
        System.out.println("Message received from queue in priority: " + i);

      }
    });

    queue.createAsyncReader(reader);
  }

  private void sendMessages() throws Exception {
    //Sending messages in varying levels of priority
    nConsumeEvent message;
    for (int i = 0; i < 20; i++) {
      nEventProperties props = new nEventProperties();
      props.put("xkey", i);

      Random ran = new Random();
      int priority = ran.nextInt(10);

      message = new nConsumeEvent(props, new byte[0]);
      message.getAttributes().setPriority((byte) priority);
      queue.push(message);
      System.out.println("Message sent to queue with priority: " + priority);
    }
  }

  private void blockConsumer() throws InterruptedException {
    //This can be anything done by the consumer that causes it to block waiting (e.g. querying the database)
    Thread.sleep(1000);
  }

  public void doSomething() {

    try {
      createSession();
      createQueue();

      //Sending an initial message to block the consumer (please see go method)
      queue.push(new nConsumeEvent(new nEventProperties(), new byte[0]));

      setupConsumer();

      //wait for consumer to finish processing messages
      Thread.sleep(2000);

      //close the session
      mySession.close();

    } catch (Exception e) {
      e.printStackTrace();
      throw new RuntimeException(e.toString());
    }
  }


  public static void main(String[] args) throws RuntimeException {
    PriorityQueue sampleApp = new PriorityQueue(System.getProperty("RNAME"));
    sampleApp.doSomething();
  }

  /**
   * Prints the usage message for this class
   */
  private static void Usage() {

    System.out.println("Usage ...\n");
    System.out.println("priorityQueue \n");

    System.out.println("<No Required Program Arguments> \n");
    System.out.println("RNAME should be supplied as a VM option");
  }


  @Override
  protected void processArgs(String[] args) {
    //No arguments are expected for this app
  }
}
