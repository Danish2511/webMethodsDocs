/*
 *
 *   Copyright (c) 1999 - 2011 my-Channels Ltd
 *   Copyright (c) 2012 - 2022 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.
 *
 *   Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG.
 *
 */
package com.pcbsys.nirvana.apps;

import com.pcbsys.nirvana.client.nBaseClientException;
import com.pcbsys.nirvana.client.nChannel;
import com.pcbsys.nirvana.client.nChannelAlreadySubscribedException;
import com.pcbsys.nirvana.client.nChannelAttributes;
import com.pcbsys.nirvana.client.nChannelNotFoundException;
import com.pcbsys.nirvana.client.nConsumeEvent;
import com.pcbsys.nirvana.client.nEventAttributes;
import com.pcbsys.nirvana.client.nEventListener;
import com.pcbsys.nirvana.client.nEventProperties;
import com.pcbsys.nirvana.client.nEventPropertiesIterator;
import com.pcbsys.nirvana.client.nRequestTimedOutException;
import com.pcbsys.nirvana.client.nSecurityException;
import com.pcbsys.nirvana.client.nSessionFactory;
import com.pcbsys.nirvana.client.nSessionNotConnectedException;
import com.pcbsys.nirvana.client.nUnexpectedResponseException;
import com.pcbsys.nirvana.client.nUnknownRemoteRealmException;
import java.io.BufferedInputStream;
import java.io.File;
import java.util.Enumeration;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

/**
 * Subscribes to a nirvana channel
 */
public class subscriberXmlExport extends nSampleApp implements nEventListener {

  private nChannel myChannel;
  private static subscriberXmlExport mySelf = null;

  private Document doc = null;
  private Element rootElement = null;

  private String xmlExportFName = "";

  /**
   * This method demonstrates the Nirvana API calls necessary to subscribe to
   * a channel. It is called after all command line arguments have been
   * received and validated
   *
   * @param realmDetails a String[] containing the possible RNAME values
   * @param achannelName the channel name to create
   * @param xmlExportFName XML export file name
   */
  protected void doit(String[] realmDetails, String achannelName, String xmlExportFName) {

    mySelf.constructSession(realmDetails);

    this.xmlExportFName = xmlExportFName;

    if (!InitXMLDoc()) {
      System.out.println("XML DOM Document can not be created.");
    }

    // Subscribes to the specified channel
    try {
      // Create a channel attributes object
      nChannelAttributes nca = new nChannelAttributes();
      nca.setName(achannelName);

      // Obtain the channel reference
      myChannel = mySession.findChannel(nca);

      // Add this object as a subscribe to the channel
      myChannel.addSubscriber(this, null, 0);

      // Stay subscribed until the user presses any key
      System.out.println("Press any key to quit !");
      BufferedInputStream bis = new BufferedInputStream(System.in);
      try {
        bis.read();
      } catch (Exception read) {
      } // Ignore this

      // Remove this subscriber
      myChannel.removeSubscriber(this);
    }
    // Handle errors
    catch (nChannelNotFoundException cnfe) {
      System.out.println("The channel specified could not be found.");
      System.out.println("Please ensure that the channel exists in the REALM you connect to.");
      cnfe.printStackTrace();
      System.exit(1);
    } catch (nSecurityException se) {
      System.out.println("Insufficient permissions for the requested operation.");
      System.out.println("Please check the ACL settings on the server.");
      se.printStackTrace();
      System.exit(1);
    } catch (nSessionNotConnectedException snce) {
      System.out.println("The session object used is not physically connected to the Nirvana Realm.");
      System.out.println("Please ensure the realm is running and check your RNAME value.");
      snce.printStackTrace();
      System.exit(1);
    } catch (nUnexpectedResponseException ure) {
      System.out.println("The Nirvana REALM has returned an unexpected response.");
      System.out.println("Please ensure the Nirvana REALM and client API used are compatible.");
      ure.printStackTrace();
      System.exit(1);
    } catch (nUnknownRemoteRealmException urre) {
      System.out.println("The channel specified resided in a remote realm which could not be found.");
      System.out.println("Please ensure the channel name specified is correct.");
      urre.printStackTrace();
      System.exit(1);
    } catch (nRequestTimedOutException rtoe) {
      System.out.println("The requested operation has timed out waiting for a response from the REALM.");
      System.out.println("If this is a very busy REALM ask your administrator to increase the client timeout values.");
      rtoe.printStackTrace();
      System.exit(1);
    } catch (nChannelAlreadySubscribedException chase) {
      System.out.println("You are already subscribed to this channel.");
      chase.printStackTrace();
      System.exit(1);
    } catch (nBaseClientException nbce) {
      System.out.println("An error occured while creating the Channel Attributes object.");
      nbce.printStackTrace();
      System.exit(1);
    }
    // Close the session we opened
    try {
      nSessionFactory.close(mySession);
    } catch (Exception ex) {
    }
    // Close any other sessions within this JVM so that we can exit
    nSessionFactory.shutdown();
  }

  protected void processArgs(String[] args) {
    switch (args.length) {
      case 2:
        System.getProperties().put("XMLFILE", args[1]);
      case 1:
        if (args[0].equals("-?")) {
          Usage();
          UsageEnv();
        }
        System.getProperties().put("CHANNAME", args[0]);
        break;
    }
  }

  public static void main(String[] args) {

    // Create an instance for this class
    mySelf = new subscriberXmlExport();

    // Process command line arguments
    mySelf.processArgs(args);

    nSampleApp.processEnvironmentVariables();

    // Check the channel name specified
    String channelName = null;
    if (System.getProperty("CHANNAME") != null) {
      channelName = System.getProperty("CHANNAME");
    } else {
      Usage();
      System.exit(1);
    }

    String sXMLExportFName = ".\\xmlEventsExport.xml";
    if (System.getProperty("XMLFILE") != null) {
      sXMLExportFName = System.getProperty("XMLFILE");
    }

    // Check the local realm details
    String RNAME = null;
    if (System.getProperty("RNAME") != null) {
      RNAME = System.getProperty("RNAME");
    } else {
      Usage();
      System.exit(1);
    }

    // Process the local REALM RNAME details
    String[] rproperties = new String[4];
    rproperties = parseRealmProperties(RNAME);

    // Subscribe to the channel specified
    mySelf.doit(rproperties, channelName, sXMLExportFName);
  }

  /**
   * A callback is received by the API to this method each time an event is
   * received from the nirvana channel. Be carefull not to spend too much time
   * processing the message inside this method, as until it exits the next
   * message can not be pushed.
   *
   * @param evt An nConsumeEvent object containing the message received from
   * the channel
   */
  public void go(nConsumeEvent evt) {
    ExportToXML(evt);
  }

  protected boolean InitXMLDoc() {

    DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
    try {
      DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
      // root elements
      doc = docBuilder.newDocument();
      rootElement = doc.createElement("Events");
      doc.appendChild(rootElement);
    } catch (Exception ex) {
      rootElement = null;
      doc = null;
    }
    return (doc != null) && (rootElement != null);
  }

  protected void SaveXMLDoc() {
    try {
      TransformerFactory transformerFactory = TransformerFactory.newInstance();
      Transformer transformer = transformerFactory.newTransformer();
      DOMSource source = new DOMSource(doc);
      StreamResult result = new StreamResult(new File(xmlExportFName));
      transformer.transform(source, result);
      System.out.println("\nEvent exported to XML...");
    } catch (TransformerException tfe) {
      System.out.println("\n!!! Ex while saving XML file: " + tfe.toString());
    }
  }

  /**
   * This method exports an event to XML
   *
   * @param evt event to export
   */
  protected void ExportToXML(nConsumeEvent evt) {

    try {

      System.out.println("\nExporting event...");

      Element evntXmlNode = doc.createElement("Event");
      rootElement.appendChild(evntXmlNode);
      evntXmlNode.setAttribute("id", String.valueOf(evt.getEventID()));
      evntXmlNode.setAttribute("tag", evt.getEventTag());

      try {
        //Export event's attributes
        if (evt.hasAttributes()) {
          nEventAttributes attributes = evt.getAttributes();
          Enumeration attrEnum = attributes.getAttributeNamesEnumeration();

          Element attrCollElem = doc.createElement("attributes");

          while (attrEnum.hasMoreElements()) {
            String sKey = attrEnum.nextElement().toString();
            Object objVal = attributes.getAttribute(sKey);
            if (objVal != null) {
              AddXMLEventAttr(attrCollElem, sKey, objVal);
            }
          }
          evntXmlNode.appendChild(attrCollElem);
        }
      } catch (Exception ex) {
        System.out.println("\nEx while exporting event's attributes: " + ex.toString());
        throw ex;
      }

      try {
        //Export event's properties
        nEventProperties props = evt.getProperties();
        if (props != null) {
          Element propCollElem = doc.createElement("properties");

          nEventPropertiesIterator keys = props.getKeyIterator();
          while (keys.hasNext()) {
            String sKey = keys.next().toString();
            Object objVal = props.get(sKey);
            AddXMLEventProp(propCollElem, sKey, objVal);
          }
          evntXmlNode.appendChild(propCollElem);
        }
      } catch (Exception ex) {
        System.out.println("\nEx while exporting event's props: " + ex.toString());
        throw ex;
      }

      SaveXMLDoc();
    } catch (Exception ex) {
      System.out.println("\nEx while exporting  event: " + ex.toString());
    }
  }

  private void AddXMLEventAttr(Element attrCollElem, String sName, Object oVal) {
    Element attrElem = doc.createElement("attrib");
    attrElem.setAttribute("name", sName);
    attrElem.setAttribute("value", oVal.toString());
    attrElem.setAttribute("type", oVal.getClass().getSimpleName());
    attrCollElem.appendChild(attrElem);
  }

  private void AddXMLEventProp(Element attrCollElem, String sName, Object oVal) {
    Element attrElem = doc.createElement("prop");
    attrElem.setAttribute("name", sName);
    attrElem.setAttribute("value", oVal.toString());
    attrElem.setAttribute("type", oVal.getClass().getSimpleName());
    attrCollElem.appendChild(attrElem);
  }

  /**
   * Prints the usage message for this class
   */
  private static void Usage() {

    System.out.println("Usage ...\n");
    System.out.println("subscribeXmlExport <channel name> [XML file name] \n");

    System.out.println("<Required Arguments> \n");
    System.out.println("<channel name> - Channel name parameter for the channel to subscribe to");
    System.out.println("\n[Optional Arguments] \n");
    System.out.println(
        "[XML file name] - destination XML file name to export events received (default: '.\\xmlEventsExport.xml')");
    System.out.println("\n\nNote: -? provides help on environment variables \n");
  }

} // End of subscriberXmlExport Class