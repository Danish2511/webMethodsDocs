/*
 *
 *   Copyright (c) 1999 - 2011 my-Channels Ltd
 *   Copyright (c) 2012 - 2022 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.
 *
 *   Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG.
 *
 */
package com.pcbsys.nirvana.apps;

import com.pcbsys.foundation.base.fEventDictionary;
import com.pcbsys.nirvana.base.nHeader;
import com.pcbsys.nirvana.client.nBaseClientException;
import com.pcbsys.nirvana.client.nChannel;
import com.pcbsys.nirvana.client.nChannelAttributes;
import com.pcbsys.nirvana.client.nChannelNotFoundException;
import com.pcbsys.nirvana.client.nConsumeEvent;
import com.pcbsys.nirvana.client.nEventProperties;
import com.pcbsys.nirvana.client.nRequestTimedOutException;
import com.pcbsys.nirvana.client.nSecurityException;
import com.pcbsys.nirvana.client.nSessionFactory;
import com.pcbsys.nirvana.client.nSessionNotConnectedException;
import com.pcbsys.nirvana.client.nUnexpectedResponseException;
import com.pcbsys.nirvana.client.nUnknownRemoteRealmException;
import java.util.ArrayList;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 * Publishes reliably to a nirvana channel
 */
public class publishXmlImport extends nSampleApp {

  private boolean isOk = true;
  private nBaseClientException asyncException;

  private static publishXmlImport mySelf = null;

  ArrayList<nConsumeEvent> listEvents = new ArrayList<nConsumeEvent>();

  /**
   * This method demonstrates the Nirvana API calls necessary to import XML with events and publish them to a
   * channel. It is called after all command line arguments have been received
   * and validated
   *
   * @param realmDetails a String[] containing the possible RNAME values
   * @param achannelName the channel name to publish to
   * @param sXMLImportFName the XML file with events to import and publish
   */
  private void doit(String[] realmDetails, String achannelName, String sXMLImportFName) {

    mySelf.constructSession(realmDetails);

    // Publishes to the specified channel
    try {

      // Create a channel attributes object
      nChannelAttributes nca = new nChannelAttributes();
      nca.setName(achannelName);

      // Obtain a reference to the channel
      nChannel myChannel = mySession.findChannel(nca);

      ImportXMLDoc(sXMLImportFName);

      try {
        for (Object ev : listEvents) {
          myChannel.publish((nConsumeEvent) ev);
        }


      } catch (nSessionNotConnectedException ex) {
      } catch (nBaseClientException ex) {
        System.out.println("Publish.java : Exception : " + ex.getMessage());
        throw ex;
      }

      // Check if an asynchronous exception has been received
      if (!isOk) {
        // If it has, then throw it
        throw asyncException;
      }
    }

    // Handle errors
    catch (nChannelNotFoundException cnfe) {
      System.out.println("The channel specified could not be found.");
      System.out.println("Please ensure that the channel exists in the Nirvana Realm you connect to.");
      cnfe.printStackTrace();
      System.exit(1);
    } catch (nSecurityException se) {
      System.out.println("Insufficient permissions for the requested operation.");
      System.out.println("Please check the ACL settings on the server.");
      se.printStackTrace();
      System.exit(1);
    } catch (nSessionNotConnectedException snce) {
      System.out.println("The session object used is not physically connected to the Nirvana Realm.");
      System.out.println("Please ensure the Nirvana Realm Server is up and check your RNAME value.");
      snce.printStackTrace();
      System.exit(1);
    } catch (nUnexpectedResponseException ure) {
      System.out.println("The Nirvana Realm Server has returned an unexpected response.");
      System.out.println("Please ensure the Nirvana Realm Server and client API used are compatible.");
      ure.printStackTrace();
      System.exit(1);
    } catch (nUnknownRemoteRealmException urre) {
      System.out.println("The channel specified resided in a remote Nirvana Realm which could not be found.");
      System.out.println("Please ensure the channel name specified is correct.");
      urre.printStackTrace();
      System.exit(1);
    } catch (nRequestTimedOutException rtoe) {
      System.out.println("The requested operation has timed out waiting for a response from the Realm,.");
      System.out.println("If this is a very busy Realm ask your administrator to increase the client timeout values.");
      rtoe.printStackTrace();
      System.exit(1);
    } catch (nBaseClientException nbce) {
      System.out.println("An error occured while creating the Channel Attributes object.");
      nbce.printStackTrace();
      System.exit(1);
    }
    // Close the session we opened
    try {
      nSessionFactory.close(mySession);
    } catch (Exception ex) {
    }
    // Close any other sessions within this JVM so that we can exit
    nSessionFactory.shutdown();
  }

  /**
   * This method imports XML with events and fills listEvents which later are published
   *
   * @param sXMLImportFName the XML file to import
   */
  protected boolean ImportXMLDoc(String sXMLImportFName) {
    boolean bRet = false;
    try {
      DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
      DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
      Document doc = dBuilder.parse(sXMLImportFName);

      NodeList nList = doc.getElementsByTagName("Event");
      int evCount = 0;
      for (int temp = 0; temp < nList.getLength(); temp++) {

        Node nNode = nList.item(temp);
        if (nNode.getNodeType() == Node.ELEMENT_NODE) {

          System.out.println("\nExporting Event " + (++evCount));

          Element eElement = (Element) nNode;
          nConsumeEvent evt = ImportEvent(eElement);
          if (evt != null) {
            listEvents.add(evt);
          }
        }
      }
      bRet = true;
    } catch (Exception ex) {
      System.out.println("\nEx processing import XML File:" + ex.toString());
    }
    return bRet;
  }

  /**
   * This method converts single event from XML to nConsumeEvent
   *
   * @param eElement the XML file to import
   * @return nConsumeEvent imported object. It can be null.
   */

  protected nConsumeEvent ImportEvent(Element eElement) {

    nConsumeEvent evt;
    try {
      String sTag = eElement.getAttribute("tag");
      byte[] buffer = null;

      evt = new nConsumeEvent(sTag, buffer);
      NodeList nList;
      try {
        //Read Properties
        nEventProperties evtProps = new nEventProperties();
        nList = eElement.getElementsByTagName("prop");
        for (int temp = 0; temp < nList.getLength(); temp++) {
          Node nNode = nList.item(temp);
          if (nNode.getNodeType() == Node.ELEMENT_NODE) {
            Element ePropElement = (Element) nNode;
            addEventProperty(evtProps, ePropElement.getAttribute("name"), ePropElement.getAttribute("value"),
                ePropElement.getAttribute("type"));
          }
        }
        if (evtProps.getSize() > 0) {
          evt.setProperties(evtProps);
        }
      } catch (Exception ex) {
        System.out.println("\nEx while importing event's props: " + ex.toString());
        throw ex;
      }

      try {
        //Read Attributes
        fEventDictionary dict = new fEventDictionary();
        nList = eElement.getElementsByTagName("attrib");
        for (int temp = 0; temp < nList.getLength(); temp++) {
          Node nNode = nList.item(temp);
          if (nNode.getNodeType() == Node.ELEMENT_NODE) {
            Element ePropElement = (Element) nNode;
            Object objVal = paramToObject(ePropElement.getAttribute("value"), ePropElement.getAttribute("type"));
            dict.put(ePropElement.getAttribute("name"), objVal);
          }
        }
        if (dict.getSize() > 0) {
          nHeader hdr = new nHeader();
          hdr.convertFromDictionary(dict);
          evt.setHeader(hdr);
        }
      } catch (Exception ex) {
        System.out.println("\nEx while importing event's attributes: " + ex.toString());
        throw ex;
      }
    } catch (Exception ex) {
      System.out.println("\nEx while importing  event: " + ex.toString());
      evt = null;
    }

    return evt;
  }

  /**
   * This method converts event's property value from String to its original type.
   * It also puts it to evtProps collection
   *
   * @param evtProps the XML file to import
   * @param sName property's name
   * @param sValue property's value
   * @param sType property's type
   */
  protected void addEventProperty(nEventProperties evtProps, String sName, String sValue, String sType) {

    if (Boolean.class.getSimpleName().equals(sType)) {
      evtProps.put(sName, Boolean.parseBoolean(sValue));
    } else if (Byte.class.getSimpleName().equals(sType)) {
      evtProps.put(sName, Byte.parseByte(sValue));
    } else if (Short.class.getSimpleName().equals(sType)) {
      evtProps.put(sName, Short.parseShort(sValue));
    } else if (Integer.class.getSimpleName().equals(sType)) {
      evtProps.put(sName, Integer.parseInt(sValue));
    } else if (Long.class.getSimpleName().equals(sType)) {
      evtProps.put(sName, Long.parseLong(sValue));
    } else if (Float.class.getSimpleName().equals(sType)) {
      evtProps.put(sName, Float.parseFloat(sValue));
    } else if (Double.class.getSimpleName().equals(sType)) {
      evtProps.put(sName, Double.parseDouble(sValue));
    } else if (Character.class.getSimpleName().equals(sType)) {
      evtProps.put(sName, sValue.charAt(0));
    } else {
      evtProps.put(sName, sValue);
    }
  }

  /**
   * This method converts event's attribute value from String to Object taking into an account its original type.
   *
   * @param value attributes's value
   * @param sType attributes's type
   */
  protected Object paramToObject(String value, String sType) {
    if (Boolean.class.getSimpleName().equals(sType)) {
      return Boolean.parseBoolean(value);
    } else if (Byte.class.getSimpleName().equals(sType)) {
      return Byte.parseByte(value);
    } else if (Short.class.getSimpleName().equals(sType)) {
      return Short.parseShort(value);
    } else if (Integer.class.getSimpleName().equals(sType)) {
      return Integer.parseInt(value);
    } else if (Long.class.getSimpleName().equals(sType)) {
      return Long.parseLong(value);
    } else if (Float.class.getSimpleName().equals(sType)) {
      return Float.parseFloat(value);
    } else if (Double.class.getSimpleName().equals(sType)) {
      return Double.parseDouble(value);
    }
    if (Character.class.getSimpleName().equals(sType)) {
      return value.charAt(0);
    } else {
      return value.getBytes();
    }
  }

  protected void processArgs(String[] args) {
    switch (args.length) {
      case 2:
        System.getProperties().put("XMLFILE", args[1]);
      case 1:
        if (args[0].equals("-?")) {
          Usage();
          UsageEnv();
        }
        System.getProperties().put("CHANNAME", args[0]);
        break;
    }
  }

  public static void main(String[] args) {

    // Create an instance for this class
    mySelf = new publishXmlImport();

    // Process command line arguments
    mySelf.processArgs(args);

    // Process Environment Variables
    nSampleApp.processEnvironmentVariables();

    // Check the channel name specified
    String channelName = null;
    if (System.getProperty("CHANNAME") != null) {
      channelName = System.getProperty("CHANNAME");
    } else {
      Usage();
      System.exit(1);
    }

    // Get XML file with events to import
    String sXMLImportFName = ".\\xmlEventsImport.xml";
    if (System.getProperty("XMLFILE") != null) {
      try {
        sXMLImportFName = System.getProperty("XMLFILE");
      } catch (Exception num) {
      } // Ignore and use the defaults
    }

    // Check the local realm details
    String RNAME = null;
    if (System.getProperty("RNAME") != null) {
      RNAME = System.getProperty("RNAME");
    } else {
      Usage();
      System.exit(1);
    }

    // Process the local REALM RNAME details
    String[] rproperties = new String[4];
    rproperties = parseRealmProperties(RNAME);

    // Publish to the channel specified
    mySelf.doit(rproperties, channelName, sXMLImportFName);
  }

  /**
   * Prints the usage message for this class
   */
  private static void Usage() {

    System.out.println("Usage ...\n");
    System.out.println("publishXmlImport <channel name> [XML file name] \n");
    System.out.println("<Required Arguments> \n");
    System.out.println("<channel name> - Channel name parameter for the channel to publish to");
    System.out.println("\n[Optional Arguments] \n");
    System.out.println(
        "[XML file name] - XML file name from where events will be imported and published (default: '.\\xmlEventsImport.xml')");
    System.out.println("\n\nNote: -? provides help on environment variables \n");
  }

} // End of publish Class

