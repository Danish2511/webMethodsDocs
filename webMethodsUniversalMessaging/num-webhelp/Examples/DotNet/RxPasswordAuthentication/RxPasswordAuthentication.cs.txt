/*
Copyright 1999-2011 (c) My-Channels
Copyright (c) 2012-2017 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.

Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG.
*/

using System;
using System.Net;
using System.Security;

namespace MyChannels.Nirvana.Samples
{
    /// <summary>
    /// This is an example of how RX entensions to the Nirvana .Net extended API allows password authentication when connecting to a realm
    /// </summary>
    public class RXPasswordAuthentication
    {
        // the url of the Nirvana realm
        private string url;
        // the username used to connect
        private string username;
        // the credentials used to connect
        private NetworkCredential credentials;
        // whether to show the password on the console when input
        bool showPassword = false;

        /// <summary>
        /// Pass the rname url of the realm and the credentials
        /// </summary>
        /// <param name="rname">rname of the realm</param>
        /// <param name="username">username used to connect</param>
        /// <param name="mechPrefs">SASL mechanism preference for connection</param>
        public RXPasswordAuthentication(string rname, string username, string mechPrefs)
        {
            url = rname;
            this.username = username;
            if (mechPrefs != null)
            {
                // Use environmental to set SASL mechanism preference
                Environment.SetEnvironmentVariable("Nirvana.sasl.client.mechanism", mechPrefs);
            }
            start();
        }

        /// <summary>
        /// Initialise the Session object using the provided credentials
        /// </summary>
        private void start()
        {
            using (var session = new Session(url))
            {
                using (SecureString password = readPassword())
                {
                    credentials = new NetworkCredential(username, password);
                }
                // Set the credentials
                session.Settings.Credentials = credentials;
                // Initialize the session
                session.Initialize();
                Console.WriteLine("Session initialised. Press <Enter> to close");
                // Wait for input from the console, exit on key entry
                Console.ReadLine();
                Console.WriteLine("Exiting the application");
            }
        }

        /// <summary>
        /// Read a password from the console
        /// </summary>
        /// <returns>A SecureString object containing the input password</returns>
        private SecureString readPassword()
        {
            SecureString password = new SecureString();
            Console.WriteLine("Enter UM realm password, press <Enter> when finished");
            ConsoleKeyInfo key = Console.ReadKey(!showPassword);
            while(key.Key != ConsoleKey.Enter)
            {
                password.AppendChar(key.KeyChar);
                key = Console.ReadKey(!showPassword);
            }
            return password;
        }

        static void Main(string[] args)
        {
            new RXPasswordAuthentication(args[0], args[1], args.Length > 2 ? args[2] : null);
        }
    }
}
