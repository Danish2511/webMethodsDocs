/*
 *
 *   Copyright (c) 1999 - 2011 my-Channels Ltd
 *   Copyright (c) 2012 - 2022 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.
 *
 *   Use, reproduction, transfer, publication or disclosure is prohibited except as specifically provided for in your License Agreement with Software AG.
 *
 */
#include "nConstants.h"
#include "nSampleApp.h"
#include "nEventListener.h"
#include "nQueueAsyncReader.h"
#include "nQueue.h"
#include "nChannelAttributes.h"
#include "nSession.h"
#include "nQueueDetails.h"
#include "nQueueReaderContext.h"
#include "nChannelNotFoundException.h"
#include "nSecurityException.h"
#include "nSessionNotConnectedException.h"
#include "nUnexpectedResponseException.h"
#include "nUnknownRemoteRealmException.h"
#include "nRequestTimedOutException.h"
#include "nConsumeEvent.h"
#include "nSessionFactory.h"
#include "nQueueAsyncTransactionReader.h"

#include <sys/timeb.h>
#include <iostream>

using namespace com::pcbsys::nirvana::apps;
using namespace com::pcbsys::nirvana::client;

/**
 * Creates an asynchronous queue listener using a queue reader
 */
class qsubscriber : public nSampleApp, public nEventListener {
    qsubscriber() : m_lastEID(0), m_startTime(0), m_byteCount(0), m_logLevel(0), m_count(-1), m_totalMsgs(0),
        m_reportCount(1000), m_bIsTx(false), m_pQueue(NULL), m_pReader(NULL) {
    }

  private:
    static std::string m_selector;
    nQueueAsyncReader *m_pReader;
    longlong m_lastEID;
    unsigned long m_startTime;
    long m_byteCount;

    int m_logLevel;
    int m_count;
    int m_totalMsgs;
    int m_reportCount;
    bool m_bIsTx;

    nQueue *m_pQueue;
    static qsubscriber *m_pSelf;

    /**
     * This method demonstrates the Nirvana API calls necessary to create an
     * asynchronous listener on a queue
     *
     * It is called after all command line arguments have been received and
     * validated
     *
     * @param pRealmDetails a String[] containing the possible RNAME values
     * @param nRealmDetail length of the rname array
     * @param queueName the queue name to pop
     * @param loglvl the specified log level
     * @param transactional whether to use a transactional queue reader
     * @param repCount the specified report count
     * @param sel the queue selector filter
     */

    void doit(std::string *pRealmDetails, int nRealmDetail, std::string queueName,
              int loglvl, bool transactional, int repCount, std::string sel) {
        m_logLevel = loglvl;
        m_reportCount = repCount;
        m_bIsTx = transactional;

        m_pSelf->constructSession(pRealmDetails, nRealmDetail);

        //Subscribes to the specified queue
        try {
            //Create a channel attributes object
            nChannelAttributes *pNca = new nChannelAttributes();
            pNca->setName(queueName);

            //Obtain the queue reference
            m_pQueue = m_pSession->findQueue(pNca);
            //output queue details
            nQueueDetails *pDetails = m_pQueue->getDetails();
            printf("Current queue size = %d\n", pDetails->getNoOfEvents());
            printf("Current queue age  = %d\n", (pDetails->getLastEventTime() - pDetails->getFirstEventTime()));
            printf("Current storage size = %d\n", pDetails->getTotalMemorySize());
            printf("Current readers    = %d\n", pDetails->getNoOfReaders());
            delete pDetails;

            nQueueReaderContext *pContext = new nQueueReaderContext(this, sel);

            //create the queue reader
            if (m_bIsTx) {
                m_pReader = m_pQueue->createAsyncTransactionalReader(pContext);
            }

            else {
                m_pReader = m_pQueue->createAsyncReader(pContext);
            }

            if (pContext->delRef())
                delete pContext;

            //Stay subscribed until the user presses any key
            printf("Press any key to quit !\n");

            std::cin.ignore();

            printf("Finished. Consumed total of %d\n", m_totalMsgs);

            //Destroy the queue reader
            nQueue::destroyReader(m_pReader);

            if (m_pQueue->delRef())
                delete m_pQueue;

            delete pNca;
        }

        //Handle errors
        catch (nChannelNotFoundException cnfe) {
            printf("The queue specified could not be found.\n");
            printf("Please ensure that the queue exists in the REALM you connect to.\n");
            exit(1);
        }

        catch (nSecurityException se) {
            printf("Unsufficient permissions for the requested operation.\n");
            printf("Please check the ACL settings on the server.\n");
            exit(1);
        }

        catch (nSessionNotConnectedException snce) {
            printf("The session object used is not physically connected to the Nirvana realm.\n");
            printf("Please ensure the realm is up and check your RNAME value.\n");
            exit(1);
        }

        catch (nUnexpectedResponseException ure) {
            printf("The Nirvana REALM has returned an unexpected response.\n");
            printf("Please ensure the Nirvana REALM and client API used are compatible.\n");
            exit(1);
        }

        catch (nUnknownRemoteRealmException urre) {
            printf("The queue specified resided in a remote realm which could not be found.\n");
            printf("Please ensure the queue name specified is correct.\n");
            exit(1);
        }

        catch (nRequestTimedOutException rtoe) {
            printf("The requested operation has timed out waiting for a response from the REALM.\n");
            printf("If this is a very busy REALM ask your administrator to increase the client timeout values.\n");
            exit(1);
        }

        catch (nBaseClientException nbce) {
            printf("An error occured while creating the Channel Attributes object.\n");
            exit(1);
        }

        catch (Exception e) {
            printf(e.displayText().c_str());  //To change body of catch statement use Options | File Templates.
        }

        //Close the session we opened
        try {
            nSessionFactory::close(m_pSession);
        }

        catch (Exception ex) {
        }

        //Close any other sessions within this program so that we can exit
        nSessionFactory::shutdown();
    }

    int getType () {
        return 0;
    }

  protected:
    virtual void processArgs(int argc, char** argv) {
        //
        // Need a min of 2, rname, queue name
        if (argc < 3) {
            Usage();
            exit(2);
        }
    }

  public:
    static int Main(int argc, char** argv) {
        //Create an instance for this class
        m_pSelf = new qsubscriber();
        m_pSelf->processArgs(argc, argv);

        //Check the queue name specified
        std::string queueName = argv[2];
        int loglvl = 1;
        int reportCount = 1000;
        bool transactional = false;
        std::string selector;

        if (argc > 3) {
            loglvl = atoi(argv[3]);
        }

        if (argc > 4) {
            transactional = !strcmp(argv[4], "true");
        }

        //Check for a selector message filter value
        if (argc > 5) {
            selector = argv[5];
        }

        if (argc > 6) {
            reportCount = atoi(argv[6]);
        }

        std::string RNAME = argv[1];

        //Process the local REALM RNAME details
        int nRproperty = 0;
        std::string *pRproperties = parseRealmProperties(RNAME, nRproperty);

        //Pop to the queue specified
        m_pSelf->doit(pRproperties, nRproperty, queueName, loglvl, transactional, reportCount, selector);

        return 0;
    }

  public:
    /**
     * A callback is received by the API to this method each time an event is received from
     * the nirvana queue. Be carefull not to spend too much time processing the message
     * inside this method, as until it exits the next message can not be pushed.
     *
     * @param pEvt An nConsumeEvent object containing the message received from the queue
     */
    void go(nConsumeEvent *pEvt) {
        if (m_bIsTx) {
            ((nQueueAsyncTransactionReader*)m_pReader)->commit(pEvt->getEventID());
        }

        //If this is the first message we receive
        if (m_count == -1) {
            //Get a timestamp to be used for message rate calculations
            struct timeb tm;
            ftime (&tm);
            m_startTime = (unsigned long) tm.time * 1000 + tm.millitm;
            m_count = 0;
        }

        //Increment the counter
        m_count++;
        m_totalMsgs++;

        //Have we reached the point where we need to report the rates?
        if (m_count == m_reportCount) {
            //Reset the counter
            m_count = 0;

            //Get a timestampt to calculate the rates
            struct timeb tm;
            ftime (&tm);
            unsigned long end = (unsigned long) tm.time * 1000 + tm.millitm;

            // Does the specified log level permits us to print on the screen?
            if (m_logLevel >= 1) {
                //Dump the rates on the screen
                if (end != m_startTime) {
                    unsigned long ts = end - m_startTime;
                    printf("Received %d in %d Evt/Sec = %d Bytes/sec=%d\n",
                           m_reportCount, ts, (m_reportCount * 1000) / ts, (m_byteCount * 1000) / ts);
                    printf("Bandwidth data : Bytes Tx [%d] Bytes Rx [%d]\n",
                           m_pSession->getOutputByteCount(), m_pSession->getInputByteCount());
                }

                else {
                    printf("Received %d faster than the system millisecond counter\n",
                           m_reportCount);
                }
            }

            //Set the startTime for the next report equal to the end timestamp for the previous one
            m_startTime = end;

            //Reset the byte counter
            m_byteCount = 0;
        }

        //If the last EID counter is not equal to the current event ID
        if (m_lastEID != pEvt->getEventID()) {
            //If yes, maybe we have missed an event, so print a message on the screen.
            //This message could be printed for a number of other reasons.
            //One of them would be someone purging a range creating an 'eid gap'.
            //As eids are never reused within a channel you could have a situation
            //where this gets printed but nothing is missed.
            printf ("Expired event range %d - %d\n", m_lastEID, (pEvt->getEventID() - 1));
            //Reset the last eid counter
            m_lastEID = pEvt->getEventID() + 1;
        }

        else {
            //Increment the last eid counter
            m_lastEID++;
        }

        //Get the data of the message
        unsigned char *pBuffer = pEvt->getEventData();
        int length = pEvt->getEventDataLength();

        if (pBuffer != NULL) {
            //Add its length to the byte counter
            m_byteCount += length;
        }

        //If the loglevel permits printing on the screen
        if (m_logLevel >= 2) {
            //Print the eid
            printf("Event id : %d\n", pEvt->getEventID());

            if (pEvt->isEndOfChannel()) {
                printf("End of channel reached\n");
            }

            //If the loglevel permits printing on the screen
            if (m_logLevel >= 3) {
                //Print the message tag
                printf("Event tag : %s\n", pEvt->getEventTag().c_str());
                //Print the message data
                unsigned char *pBuffer = pEvt->getEventData();
                int length = pEvt->getEventDataLength();
                std::string eventData;
                nConstants::decode(pBuffer, length, eventData);
                printf("Event data : %s\n", eventData.c_str());

                if (pEvt->hasAttributes()) {
                    displayEventAttributes(pEvt->getAttributes());
                }

                nEventProperties *pProp = pEvt->getProperties();

                if (pProp != NULL) {
                    displayEventProperties(pProp);
                }
            }
        }
    }


  private:
    /**
     * Prints the usage message for this class
     */
    static void Usage() {
        printf("Usage ...\n\n");
        printf("qsubscriber <rname> <queue name> [debug] [transactional] [selecter] [count] \n\n");
        printf("<Required Arguments> \n\n");
        printf("<rname> - the rname of the server to connect to\n");
        printf("<queue name> - Queue name to pop from\n");
        printf("\n[Optional Arguments] \n\n");
        printf("[debug] - The level of output from each event, 0 - none, 1 - summary, 2 - EIDs, 3 - All\n");
        printf("[transactional] - true / false whether the subscriber is transactional, if true, each event consumed will be ack'd to confirm receipt\n");
        printf("[selector] - The event filter string to use\n");
        printf("[count] - The number of events to wait before printing out summary information\n");
    }
};

qsubscriber* qsubscriber::m_pSelf = NULL;
std::string qsubscriber::m_selector;

int main (int argc, char** argv) {
    return qsubscriber::Main (argc, argv);
}

